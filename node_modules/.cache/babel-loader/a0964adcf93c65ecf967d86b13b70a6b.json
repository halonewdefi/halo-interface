{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from './useERC20Balance';\nimport { utils } from 'ethers';\nexport const useRewardsTVL = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const TWAprice = useUniswapTWAP();\n  const balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    var _rewardRate;\n\n    const virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n\n    if (TWAprice !== null && TWAprice !== void 0 && TWAprice.data && balance !== null && balance !== void 0 && balance.data && virtualPrice !== null && virtualPrice !== void 0 && virtualPrice.data && (_rewardRate = rewardRate) !== null && _rewardRate !== void 0 && _rewardRate.data) {\n      var _balance$data;\n\n      const year = 31536000;\n      const tvl = balance === null || balance === void 0 ? void 0 : (_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : _balance$data.div(virtualPrice === null || virtualPrice === void 0 ? void 0 : virtualPrice.data);\n      const price = utils.formatEther(TWAprice === null || TWAprice === void 0 ? void 0 : TWAprice.data);\n      return tvl;\n    }\n  }\n};\n\n_s(useRewardsTVL, \"VTlZFnmc6OX3DBE4JbJDZyrd8i4=\", false, function () {\n  return [useUniswapTWAP, useERC20Balance, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsTVL.js"],"names":["useQuery","useApolloQuery","gql","getRewardRate","getVirtualPrice","defaults","useUniswapTWAP","useERC20Balance","utils","useRewardsTVL","rpc","pollInterval","api","graphql","staleTime","TWAprice","balance","address","usdv3crvf","stakingRewards","virtualPrice","data","rewardRate","year","tvl","div","price","formatEther"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,aAAT,EAAwBC,eAAxB,QAA+C,oBAA/C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;AAElI,QAAMC,QAAQ,GAAGT,cAAc,EAA/B;AACA,QAAMU,OAAO,GAAGT,eAAe,CAACF,QAAQ,CAACY,OAAT,CAAiBC,SAAlB,EAA6Bb,QAAQ,CAACY,OAAT,CAAiBE,cAA9C,CAA/B;;AAGA,MAAI,CAACT,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAAA;;AAEJ,UAAMU,YAAY,GAAGpB,QAAQ,CAAE,iBAAgBK,QAAQ,CAACY,OAAT,CAAiBC,SAAU,EAA7C,EAC5B,YAAY;AACX,aAAO,MAAMd,eAAe,EAA5B;AACA,KAH2B,EAGzB;AACFU,MAAAA,SAAS,EAAET,QAAQ,CAACO,GAAT,CAAaE;AADtB,KAHyB,CAA7B;;AAQA,QAAIC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAEM,IAAV,IACHL,OADG,aACHA,OADG,eACHA,OAAO,CAAEK,IADN,IAEHD,YAFG,aAEHA,YAFG,eAEHA,YAAY,CAAEC,IAFX,mBAGHC,UAHG,wCAGH,YAAYD,IAHb,EAGmB;AAAA;;AAElB,YAAME,IAAI,GAAG,QAAb;AACA,YAAMC,GAAG,GAAGR,OAAH,aAAGA,OAAH,wCAAGA,OAAO,CAAEK,IAAZ,kDAAG,cAAeI,GAAf,CAAmBL,YAAnB,aAAmBA,YAAnB,uBAAmBA,YAAY,CAAEC,IAAjC,CAAZ;AACA,YAAMK,KAAK,GAAGlB,KAAK,CAACmB,WAAN,CAAkBZ,QAAlB,aAAkBA,QAAlB,uBAAkBA,QAAQ,CAAEM,IAA5B,CAAd;AAGA,aAAOG,GAAP;AAEA;AACD;AAED,CAlCM;;GAAMf,a;UAEKH,c,EACDC,e,EAQMP,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from './useERC20Balance'\nimport { utils } from 'ethers'\n\nexport const useRewardsTVL = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (TWAprice?.data &&\n\t\t\tbalance?.data &&\n\t\t\tvirtualPrice?.data &&\n\t\t\trewardRate?.data) {\n\n\t\t\tconst year = 31536000\n\t\t\tconst tvl = balance?.data?.div(virtualPrice?.data)\n\t\t\tconst price = utils.formatEther(TWAprice?.data)\n\n\n\t\t\treturn tvl\n\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}