{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getPreCommitBond, getPreCommitCount, getPreCommitMaxAmountIn, getPreCommitMaxCommits, getPreCommitMinAmountIn, getPreCommitStarted, getPreCommitTokenIn, getPreCommitTotal } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useWallet } from 'use-wallet';\nexport const usePreCommit = function (preCommitAddress) {\n  _s();\n\n  let rpc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.staleTime;\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const bond = useQuery(`${preCommitAddress}_bond`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitBond(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const count = useQuery(`${preCommitAddress}_count`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitCount(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const maxAmountIn = useQuery(`${preCommitAddress}_maxAmountIn`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitMaxAmountIn(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const maxCommits = useQuery(`${preCommitAddress}_maxCommits`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitMaxCommits(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const minAmountIn = useQuery(`${preCommitAddress}_minAmountIn`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitMinAmountIn(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const started = useQuery(`${preCommitAddress}_started`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitStarted(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const tokenIn = useQuery(`${preCommitAddress}_tokenIn`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitTokenIn(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    const total = useQuery(`${preCommitAddress}_tokenIn`, async () => {\n      if (preCommitAddress) {\n        return await getPreCommitTotal(preCommitAddress);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!preCommitAddress\n    });\n    return {\n      bond: bond,\n      count: count,\n      maxAmountIn: maxAmountIn,\n      minAmountIn: minAmountIn,\n      maxCommits: maxCommits,\n      started: started,\n      tokenIn: tokenIn,\n      total: total\n    };\n  }\n};\n\n_s(usePreCommit, \"SqK6SNWTvng6eK4ZSiHi9wavYy8=\", false, function () {\n  return [useQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/usePreCommit.js"],"names":["useQuery","useApolloQuery","gql","getPreCommitBond","getPreCommitCount","getPreCommitMaxAmountIn","getPreCommitMaxCommits","getPreCommitMinAmountIn","getPreCommitStarted","getPreCommitTokenIn","getPreCommitTotal","defaults","useWallet","usePreCommit","preCommitAddress","rpc","pollInterval","api","graphql","staleTime","bond","enabled","count","maxAmountIn","maxCommits","minAmountIn","started","tokenIn","total"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getPreCommitBond, getPreCommitCount, getPreCommitMaxAmountIn, getPreCommitMaxCommits, getPreCommitMinAmountIn, getPreCommitStarted, getPreCommitTokenIn, getPreCommitTotal } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useWallet } from 'use-wallet'\n\nexport const usePreCommit = (preCommitAddress, rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst bond = useQuery(`${preCommitAddress}_bond`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitBond(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst count = useQuery(`${preCommitAddress}_count`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitCount(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst maxAmountIn = useQuery(`${preCommitAddress}_maxAmountIn`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitMaxAmountIn(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst maxCommits = useQuery(`${preCommitAddress}_maxCommits`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitMaxCommits(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst minAmountIn = useQuery(`${preCommitAddress}_minAmountIn`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitMinAmountIn(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst started = useQuery(`${preCommitAddress}_started`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitStarted(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst tokenIn = useQuery(`${preCommitAddress}_tokenIn`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitTokenIn(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\tconst total = useQuery(`${preCommitAddress}_tokenIn`,\n\t\t\tasync () => {\n\t\t\t\tif (preCommitAddress) {\n\t\t\t\t\treturn await getPreCommitTotal(\n\t\t\t\t\t\tpreCommitAddress,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: !!preCommitAddress,\n\t\t\t},\n\t\t)\n\n\t\treturn {\n\t\t\tbond: bond,\n\t\t\tcount: count,\n\t\t\tmaxAmountIn: maxAmountIn,\n\t\t\tminAmountIn: minAmountIn,\n\t\t\tmaxCommits: maxCommits,\n\t\t\tstarted: started,\n\t\t\ttokenIn: tokenIn,\n\t\t\ttotal: total,\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}