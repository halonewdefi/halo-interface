{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport defaults from '../common/defaults';\nimport { useXvaderPrice } from './useXvaderPrice';\nimport { utils } from 'ethers';\nexport const useXvaderAPR = function () {\n  _s();\n\n  let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Day';\n  let basedOnNumberOfRecords = arguments.length > 1 ? arguments[1] : undefined;\n  let days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 365;\n  let pollInterval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.graphql.pollInterval;\n  const [xvaderPrices] = useXvaderPrice(basedOnNumberOfRecords, pollInterval, type);\n\n  if (xvaderPrices) {\n    var _xvaderPrices$globals;\n\n    const [currentPrice] = xvaderPrices === null || xvaderPrices === void 0 ? void 0 : xvaderPrices.globals;\n    const [oldestPrice] = xvaderPrices === null || xvaderPrices === void 0 ? void 0 : (_xvaderPrices$globals = xvaderPrices.globals) === null || _xvaderPrices$globals === void 0 ? void 0 : _xvaderPrices$globals.slice(-1);\n    const currentPriceBN = utils.parseUnits(currentPrice === null || currentPrice === void 0 ? void 0 : currentPrice.value, 'wei');\n    const oldestPriceBN = utils.parseUnits(oldestPrice === null || oldestPrice === void 0 ? void 0 : oldestPrice.value, 'wei');\n    const daysDifferent = Math.floor(((currentPrice === null || currentPrice === void 0 ? void 0 : currentPrice.timestamp) - (oldestPrice === null || oldestPrice === void 0 ? void 0 : oldestPrice.timestamp)) / 86400);\n\n    if (currentPriceBN !== null && currentPriceBN !== void 0 && currentPriceBN.gt(0) && oldestPriceBN !== null && oldestPriceBN !== void 0 && oldestPriceBN.gt(0) && daysDifferent) {\n      const apr = currentPriceBN.sub(oldestPriceBN).mul(utils.parseUnits('1', 18)).div(oldestPriceBN).div(daysDifferent).mul(days).toString();\n      return [utils.formatUnits(apr)];\n    }\n  }\n\n  return [];\n};\n\n_s(useXvaderAPR, \"J08qWcGoRHogf/ws6fKpuzAKGYE=\", false, function () {\n  return [useXvaderPrice];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useXvaderAPR.js"],"names":["defaults","useXvaderPrice","utils","useXvaderAPR","type","basedOnNumberOfRecords","days","pollInterval","api","graphql","xvaderPrices","currentPrice","globals","oldestPrice","slice","currentPriceBN","parseUnits","value","oldestPriceBN","daysDifferent","Math","floor","timestamp","gt","apr","sub","mul","div","toString","formatUnits"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG,YAAwG;AAAA;;AAAA,MAAvGC,IAAuG,uEAAhG,KAAgG;AAAA,MAAzFC,sBAAyF;AAAA,MAAjEC,IAAiE,uEAA1D,GAA0D;AAAA,MAArDC,YAAqD,uEAAtCP,QAAQ,CAACQ,GAAT,CAAaC,OAAb,CAAqBF,YAAiB;AAEnI,QAAM,CAACG,YAAD,IAAiBT,cAAc,CAACI,sBAAD,EAAyBE,YAAzB,EAAuCH,IAAvC,CAArC;;AAEA,MAAGM,YAAH,EAAiB;AAAA;;AAChB,UAAM,CAACC,YAAD,IAAiBD,YAAjB,aAAiBA,YAAjB,uBAAiBA,YAAY,CAAEE,OAArC;AACA,UAAM,CAACC,WAAD,IAAgBH,YAAhB,aAAgBA,YAAhB,gDAAgBA,YAAY,CAAEE,OAA9B,0DAAgB,sBAAuBE,KAAvB,CAA6B,CAAC,CAA9B,CAAtB;AACA,UAAMC,cAAc,GAAGb,KAAK,CAACc,UAAN,CAAiBL,YAAjB,aAAiBA,YAAjB,uBAAiBA,YAAY,CAAEM,KAA/B,EAAsC,KAAtC,CAAvB;AACA,UAAMC,aAAa,GAAGhB,KAAK,CAACc,UAAN,CAAiBH,WAAjB,aAAiBA,WAAjB,uBAAiBA,WAAW,CAAEI,KAA9B,EAAqC,KAArC,CAAtB;AACA,UAAME,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAC,CAAAV,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEW,SAAd,KAA0BT,WAA1B,aAA0BA,WAA1B,uBAA0BA,WAAW,CAAES,SAAvC,CAAD,IAAqD,KAAhE,CAAtB;;AACA,QAAGP,cAAc,SAAd,IAAAA,cAAc,WAAd,IAAAA,cAAc,CAAEQ,EAAhB,CAAmB,CAAnB,KAAyBL,aAAzB,aAAyBA,aAAzB,eAAyBA,aAAa,CAAEK,EAAf,CAAkB,CAAlB,CAAzB,IAAiDJ,aAApD,EAAmE;AAClE,YAAMK,GAAG,GAAOT,cAAc,CAACU,GAAf,CAAmBP,aAAnB,CAAD,CACbQ,GADa,CACTxB,KAAK,CAACc,UAAN,CAAiB,GAAjB,EAAsB,EAAtB,CADS,CAAD,CAEZW,GAFY,CAERT,aAFQ,CAAD,CAGXS,GAHW,CAGPR,aAHO,EAIXO,GAJW,CAIPpB,IAJO,CAAD,CAKVsB,QALU,EAAZ;AAMA,aAAO,CAAC1B,KAAK,CAAC2B,WAAN,CAAkBL,GAAlB,CAAD,CAAP;AACA;AACD;;AAED,SAAO,EAAP;AACA,CAtBM;;GAAMrB,Y;UAEWF,c","sourcesContent":["import defaults from '../common/defaults'\nimport { useXvaderPrice } from './useXvaderPrice'\nimport { utils } from 'ethers'\n\nexport const useXvaderAPR = (type = 'Day', basedOnNumberOfRecords, days = 365, pollInterval = defaults.api.graphql.pollInterval) => {\n\n\tconst [xvaderPrices] = useXvaderPrice(basedOnNumberOfRecords, pollInterval, type)\n\n\tif(xvaderPrices) {\n\t\tconst [currentPrice] = xvaderPrices?.globals\n\t\tconst [oldestPrice] = xvaderPrices?.globals?.slice(-1)\n\t\tconst currentPriceBN = utils.parseUnits(currentPrice?.value, 'wei')\n\t\tconst oldestPriceBN = utils.parseUnits(oldestPrice?.value, 'wei')\n\t\tconst daysDifferent = Math.floor((currentPrice?.timestamp - oldestPrice?.timestamp) / 86400)\n\t\tif(currentPriceBN?.gt(0) && oldestPriceBN?.gt(0) && daysDifferent) {\n\t\t\tconst apr = ((((currentPriceBN.sub(oldestPriceBN))\n\t\t\t\t.mul(utils.parseUnits('1', 18)))\n\t\t\t\t.div(oldestPriceBN))\n\t\t\t\t.div(daysDifferent)\n\t\t\t\t.mul(days))\n\t\t\t\t.toString()\n\t\t\treturn [utils.formatUnits(apr)]\n\t\t}\n\t}\n\n\treturn []\n}"]},"metadata":{},"sourceType":"module"}