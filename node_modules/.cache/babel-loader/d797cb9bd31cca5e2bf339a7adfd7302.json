{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getERC20BalanceOf } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useWallet } from 'use-wallet';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from '../hooks/useERC20Balance';\nexport const useRewardsAPY = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const wallet = useWallet();\n  const TWAprice = useUniswapTWAP();\n  const TVL = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`, async () => {\n      return await getERC20BalanceOf(defaults.network.provider);\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n    return TWAprice;\n  }\n};\n\n_s(useRewardsAPY, \"5w4NkKT2NOIP1w78luL96OxuH0c=\", false, function () {\n  return [useWallet, useUniswapTWAP, useERC20Balance, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsAPY.js"],"names":["useQuery","useApolloQuery","gql","getERC20BalanceOf","defaults","useWallet","useUniswapTWAP","useERC20Balance","useRewardsAPY","rpc","pollInterval","api","graphql","staleTime","wallet","TWAprice","TVL","address","usdv3crvf","stakingRewards","rewardRate","network","provider"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,iBAAT,QAAkC,oBAAlC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;AAElI,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AAEA,QAAMU,QAAQ,GAAGT,cAAc,EAA/B;AACA,QAAMU,GAAG,GAAGT,eAAe,CAACH,QAAQ,CAACa,OAAT,CAAiBC,SAAlB,EAA6Bd,QAAQ,CAACa,OAAT,CAAiBE,cAA9C,CAA3B;;AAGA,MAAI,CAACV,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMW,UAAU,GAAGpB,QAAQ,CAAE,cAAaI,QAAQ,CAACa,OAAT,CAAiBE,cAAe,EAA/C,EAC1B,YAAY;AACX,aAAO,MAAMhB,iBAAiB,CAC7BC,QAAQ,CAACiB,OAAT,CAAiBC,QADY,CAA9B;AAGA,KALyB,EAKvB;AACFT,MAAAA,SAAS,EAAET,QAAQ,CAACO,GAAT,CAAaE;AADtB,KALuB,CAA3B;AAUA,WAAOE,QAAP;AACA;AAED,CA1BM;;GAAMP,a;UAEGH,S,EAEEC,c,EACLC,e,EAQQP,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getERC20BalanceOf } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useWallet } from 'use-wallet'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from '../hooks/useERC20Balance'\n\nexport const useRewardsAPY = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst wallet = useWallet()\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst TVL = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getERC20BalanceOf(\n\t\t\t\t\tdefaults.network.provider,\n\t\t\t\t)\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\treturn TWAprice\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}