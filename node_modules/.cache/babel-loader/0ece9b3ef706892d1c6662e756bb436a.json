{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum';\nexport const useMintLimitRemains = function () {\n  _s();\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const {\n    data: minter\n  } = useQuery('minter', async () => {\n    return await getMinter();\n  }, {\n    staleTime: staleTime\n  });\n  const address = useQuery('lbt', async () => {\n    return await getMinterLbt(minter);\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n  console.log(address); // const { data: minter } = useQuery('minter', () => {\n  // \treturn getMinter()\n  // }, {\n  // \tstaleTime: staleTime,\n  // },\n  // )\n  // const limits = useQuery('dailyLimits', () => {\n  // \treturn getMinterDailyLimits(minter)\n  // }, {\n  // \tstaleTime: staleTime,\n  // \tenabled: !!minter,\n  // },\n  // )\n  // const cycleMints = useQuery('cycleMints',\n  // \tasync () => {\n  // \t\tconsole.log(minter)\n  // \t\treturn getCycleMints(minter)\n  // \t}, {\n  // \t\tstaleTime: defaults.api.staleTime,\n  // \t}, {\n  // \t\tstaleTime: staleTime,\n  // \t\tenabled: (!!minter && !!limits),\n  // \t},\n  // )\n  // console.log(cycleMints)\n  // if(limits?.data?.[1] && cycleMints.data) {\n  // \treturn limits?.data?.[1].sub(cycleMints.data)\n  // }\n  // else {\n  // \treturn BigNumber.from('0')\n  // }\n};\n\n_s(useMintLimitRemains, \"FEhh1r14+b/PyuEKNRDuNZg8a1o=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useMintLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleMints","useMintLimitRemains","staleTime","api","data","minter","address","getMinterLbt","enabled","console","log"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAM;AAAEE,IAAAA,IAAI,EAAEC;AAAR,MAAmBT,QAAQ,CAAC,QAAD,EAAW,YAAY;AACvD,WAAO,MAAME,SAAS,EAAtB;AACA,GAFgC,EAE9B;AACFI,IAAAA,SAAS,EAAEA;AADT,GAF8B,CAAjC;AAOA,QAAMI,OAAO,GAAGV,QAAQ,CAAC,KAAD,EAAQ,YAAY;AAC3C,WAAO,MAAMW,YAAY,CAACF,MAAD,CAAzB;AACA,GAFuB,EAErB;AACFH,IAAAA,SAAS,EAAEA,SADT;AAEFM,IAAAA,OAAO,EAAE,CAAC,CAACH;AAFT,GAFqB,CAAxB;AAQAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAjB0E,CAmB1E;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,CAvDM;;GAAML,mB;UAEaL,Q,EAOTA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum'\n\nexport const useMintLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst { data: minter } = useQuery('minter', async () => {\n\t\treturn await getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\n\tconst address = useQuery('lbt', async () => {\n\t\treturn await getMinterLbt(minter)\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !!minter,\n\t},\n\t)\n\n\tconsole.log(address)\n\n\t// const { data: minter } = useQuery('minter', () => {\n\t// \treturn getMinter()\n\t// }, {\n\t// \tstaleTime: staleTime,\n\t// },\n\t// )\n\n\t// const limits = useQuery('dailyLimits', () => {\n\t// \treturn getMinterDailyLimits(minter)\n\t// }, {\n\t// \tstaleTime: staleTime,\n\t// \tenabled: !!minter,\n\t// },\n\t// )\n\n\t// const cycleMints = useQuery('cycleMints',\n\t// \tasync () => {\n\t// \t\tconsole.log(minter)\n\t// \t\treturn getCycleMints(minter)\n\t// \t}, {\n\t// \t\tstaleTime: defaults.api.staleTime,\n\t// \t}, {\n\t// \t\tstaleTime: staleTime,\n\t// \t\tenabled: (!!minter && !!limits),\n\t// \t},\n\t// )\n\n\t// console.log(cycleMints)\n\n\t// if(limits?.data?.[1] && cycleMints.data) {\n\t// \treturn limits?.data?.[1].sub(cycleMints.data)\n\t// }\n\t// else {\n\t// \treturn BigNumber.from('0')\n\t// }\n\n}"]},"metadata":{},"sourceType":"module"}