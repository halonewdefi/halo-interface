{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum';\nexport const useMintLimitRemains = function () {\n  _s();\n\n  var _limits$data;\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const minter = useQuery('minter', async () => {\n    return await getMinter();\n  }, {\n    staleTime: staleTime\n  });\n  console.log(minter);\n  const limits = useQuery('dailyLimits', async () => {\n    console.log(minter.data);\n    return await getMinterDailyLimits(minter.data);\n  }, {\n    staleTime: staleTime,\n    enabled: !minter.isSuccess\n  });\n  const {\n    data: cycleMints\n  } = useQuery('cycleMints', async () => {\n    console.log(minter.data);\n    return await getCycleMints(minter.data);\n  }, {\n    staleTime: defaults.api.staleTime\n  }, {\n    staleTime: staleTime,\n    enabled: minter.isSuccess\n  });\n\n  if (limits !== null && limits !== void 0 && (_limits$data = limits.data) !== null && _limits$data !== void 0 && _limits$data[1] && cycleMints) {\n    var _limits$data2;\n\n    return limits === null || limits === void 0 ? void 0 : (_limits$data2 = limits.data) === null || _limits$data2 === void 0 ? void 0 : _limits$data2[1].sub(cycleMints);\n  } else {\n    return BigNumber.from('0');\n  }\n};\n\n_s(useMintLimitRemains, \"C64WQr5vWzDLHuLDQ0UPA0abnwY=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useMintLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleMints","useMintLimitRemains","staleTime","api","minter","console","log","limits","data","enabled","isSuccess","cycleMints","sub","from"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAME,MAAM,GAAGR,QAAQ,CAAC,QAAD,EAAW,YAAY;AAC7C,WAAO,MAAME,SAAS,EAAtB;AACA,GAFsB,EAEpB;AACFI,IAAAA,SAAS,EAAEA;AADT,GAFoB,CAAvB;AAMAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAMG,MAAM,GAAGX,QAAQ,CAAC,aAAD,EAAgB,YAAY;AAClDS,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACI,IAAnB;AACA,WAAO,MAAMT,oBAAoB,CAACK,MAAM,CAACI,IAAR,CAAjC;AACA,GAHsB,EAGpB;AACFN,IAAAA,SAAS,EAAEA,SADT;AAEFO,IAAAA,OAAO,EAAE,CAACL,MAAM,CAACM;AAFf,GAHoB,CAAvB;AASA,QAAM;AAAEF,IAAAA,IAAI,EAAEG;AAAR,MAAuBf,QAAQ,CAAC,YAAD,EACpC,YAAY;AACXS,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACI,IAAnB;AACA,WAAO,MAAMR,aAAa,CAACI,MAAM,CAACI,IAAR,CAA1B;AACA,GAJmC,EAIjC;AACFN,IAAAA,SAAS,EAAEL,QAAQ,CAACM,GAAT,CAAaD;AADtB,GAJiC,EAMjC;AACFA,IAAAA,SAAS,EAAEA,SADT;AAEFO,IAAAA,OAAO,EAAEL,MAAM,CAACM;AAFd,GANiC,CAArC;;AAYA,MAAGH,MAAM,SAAN,IAAAA,MAAM,WAAN,oBAAAA,MAAM,CAAEC,IAAR,sDAAe,CAAf,KAAqBG,UAAxB,EAAoC;AAAA;;AACnC,WAAOJ,MAAP,aAAOA,MAAP,wCAAOA,MAAM,CAAEC,IAAf,kDAAO,cAAe,CAAf,EAAkBI,GAAlB,CAAsBD,UAAtB,CAAP;AACA,GAFD,MAGK;AACJ,WAAOhB,SAAS,CAACkB,IAAV,CAAe,GAAf,CAAP;AACA;AAED,CArCM;;GAAMZ,mB;UAEGL,Q,EAOAA,Q,EAScA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum'\n\nexport const useMintLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst minter = useQuery('minter', async () => {\n\t\treturn await getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\tconsole.log(minter)\n\tconst limits = useQuery('dailyLimits', async () => {\n\t\tconsole.log(minter.data)\n\t\treturn await getMinterDailyLimits(minter.data)\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !minter.isSuccess,\n\t},\n\t)\n\n\tconst { data: cycleMints } = useQuery('cycleMints',\n\t\tasync () => {\n\t\t\tconsole.log(minter.data)\n\t\t\treturn await getCycleMints(minter.data)\n\t\t}, {\n\t\t\tstaleTime: defaults.api.staleTime,\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t\tenabled: minter.isSuccess,\n\t\t},\n\t)\n\n\tif(limits?.data?.[1] && cycleMints) {\n\t\treturn limits?.data?.[1].sub(cycleMints)\n\t}\n\telse {\n\t\treturn BigNumber.from('0')\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}