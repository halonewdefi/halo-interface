{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getERC20BalanceOf } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useWallet } from 'use-wallet';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nexport const useRewardsAPY = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const wallet = useWallet();\n  const TWAprice = useUniswapTWAP();\n  const tvl = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    // const balance = useQuery('rewardsAPY',\n    // \tasync () => {\n    // \t\treturn await getERC20BalanceOf(\n    // \t\t\tdefaults.network.provider,\n    // \t\t)\n    // \t}, {\n    // \t\tstaleTime: defaults.api.staleTime,\n    // \t},\n    // )\n    return TWAprice;\n  }\n};\n\n_s(useRewardsAPY, \"JCJ1fS7rmgFsQ3B9EgK7jOig2xc=\", true, function () {\n  return [useWallet, useUniswapTWAP];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsAPY.js"],"names":["useQuery","useApolloQuery","gql","getERC20BalanceOf","defaults","useWallet","useUniswapTWAP","useRewardsAPY","rpc","pollInterval","api","graphql","staleTime","wallet","TWAprice","tvl","useERC20Balance","address","usdv3crvf","stakingRewards"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,iBAAT,QAAkC,oBAAlC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EL,QAAQ,CAACM,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BR,QAAQ,CAACM,GAAT,CAAaE,SAAc;AAElI,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEA,QAAMS,QAAQ,GAAGR,cAAc,EAA/B;AACA,QAAMS,GAAG,GAAGC,eAAe,CAACZ,QAAQ,CAACa,OAAT,CAAiBC,SAAlB,EAA6Bd,QAAQ,CAACa,OAAT,CAAiBE,cAA9C,CAA3B;;AAGA,MAAI,CAACX,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAOM,QAAP;AACA;AAED,CA1BM;;GAAMP,a;UAEGF,S,EAEEC,c","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getERC20BalanceOf } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useWallet } from 'use-wallet'\nimport { useUniswapTWAP } from './useUniswapTWAP'\n\nexport const useRewardsAPY = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst wallet = useWallet()\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst tvl = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\t// const balance = useQuery('rewardsAPY',\n\t\t// \tasync () => {\n\t\t// \t\treturn await getERC20BalanceOf(\n\t\t// \t\t\tdefaults.network.provider,\n\t\t// \t\t)\n\t\t// \t}, {\n\t\t// \t\tstaleTime: defaults.api.staleTime,\n\t\t// \t},\n\t\t// )\n\n\t\treturn TWAprice\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}