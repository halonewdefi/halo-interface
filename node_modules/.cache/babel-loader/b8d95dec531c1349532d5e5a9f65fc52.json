{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getLocks } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useWallet } from 'use-wallet';\nexport const useLocks = function (token) {\n  _s();\n\n  let rpc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let lockIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let pollInterval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaults.api.staleTime;\n  const wallet = useWallet();\n\n  if (!rpc) {\n    var _wallet$account;\n\n    const query = gql`\n\t\tquery {\n\t\t\tlocks (\n\t\t\t\torderBy: release\n\t\t\t\torderDirection: desc\n\t\t\t\twhere: {\n\t\t\t\t\tisRemoved: false\n\t\t\t\t\tuser_contains: \"${wallet === null || wallet === void 0 ? void 0 : (_wallet$account = wallet.account) === null || _wallet$account === void 0 ? void 0 : _wallet$account.toLowerCase()}\"\n\t\t\t\t\t${token ? `token : ${token}` : ''}\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\ttoken\n\t\t\t\tamount\n\t\t\t\trelease\n\t\t\t}\n\t\t}\n\t`;\n    const locks = useApolloQuery(query, {\n      pollInterval: pollInterval\n    });\n    return locks;\n  } else {\n    const locks = useQuery(`locks_${wallet === null || wallet === void 0 ? void 0 : wallet.account}`, async () => {\n      return await getLocks(lockIndex);\n    }, {\n      staleTime: staleTime\n    });\n    return locks;\n  }\n};\n\n_s(useLocks, \"Srt0euK0VNxoTPpYFzGVuJn7Yu4=\", false, function () {\n  return [useWallet, useApolloQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useLocks.js"],"names":["useQuery","useApolloQuery","gql","getLocks","defaults","useWallet","useLocks","token","rpc","lockIndex","pollInterval","api","graphql","staleTime","wallet","query","account","toLowerCase","locks"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,QAAT,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAACC,KAAD,EAA6H;AAAA;;AAAA,MAArHC,GAAqH,uEAA/G,KAA+G;AAAA,MAAxGC,SAAwG,uEAA5F,CAA4F;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;AAEpJ,QAAMC,MAAM,GAAGT,SAAS,EAAxB;;AAEA,MAAI,CAACG,GAAL,EAAU;AAAA;;AACT,UAAMO,KAAK,GAAGb,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBY,MAPJ,aAOIA,MAPJ,0CAOIA,MAAM,CAAEE,OAPZ,oDAOI,gBAAiBC,WAAjB,EAA+B;AACtD,OAAOV,KAAK,GAAI,WAAUA,KAAM,EAApB,GAAwB,EAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAhBE;AAiBA,UAAMW,KAAK,GAAGjB,cAAc,CAC3Bc,KAD2B,EAE3B;AACCL,MAAAA,YAAY,EAAEA;AADf,KAF2B,CAA5B;AAOA,WAAOQ,KAAP;AACA,GA1BD,MA2BK;AAEJ,UAAMA,KAAK,GAAGlB,QAAQ,CAAE,SAAQc,MAAT,aAASA,MAAT,uBAASA,MAAM,CAAEE,OAAQ,EAA1B,EAA6B,YAAY;AAC9D,aAAO,MAAMb,QAAQ,CAACM,SAAD,CAArB;AACA,KAFqB,EAEnB;AACFI,MAAAA,SAAS,EAAEA;AADT,KAFmB,CAAtB;AAOA,WAAOK,KAAP;AACA;AAED,CA3CM;;GAAMZ,Q;UAEGD,S,EAoBAJ,c,EAWAD,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getLocks } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useWallet } from 'use-wallet'\n\nexport const useLocks = (token, rpc = false, lockIndex = 0, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst wallet = useWallet()\n\n\tif (!rpc) {\n\t\tconst query = gql`\n\t\tquery {\n\t\t\tlocks (\n\t\t\t\torderBy: release\n\t\t\t\torderDirection: desc\n\t\t\t\twhere: {\n\t\t\t\t\tisRemoved: false\n\t\t\t\t\tuser_contains: \"${wallet?.account?.toLowerCase()}\"\n\t\t\t\t\t${token ? `token : ${token}` : ''}\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\ttoken\n\t\t\t\tamount\n\t\t\t\trelease\n\t\t\t}\n\t\t}\n\t`\n\t\tconst locks = useApolloQuery(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\tpollInterval: pollInterval,\n\t\t\t},\n\t\t)\n\n\t\treturn locks\n\t}\n\telse {\n\n\t\tconst locks = useQuery(`locks_${wallet?.account}`, async () => {\n\t\t\treturn await getLocks(lockIndex)\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t},\n\t\t)\n\n\t\treturn locks\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}