{"ast":null,"code":"import { ethers } from 'ethers';\nimport humanStandardTokenAbi from '../artifacts/abi/humanStandardToken';\nimport converterAbi from '../artifacts/abi/converter';\nimport defaults from './defaults';\nimport xVaderAbi from '../artifacts/abi/xvader';\nimport linearVestingAbi from '../artifacts/abi/linearVesting';\nimport vaderBond from '../artifacts/abi/vaderBond';\nimport zapEth from '../artifacts/abi/zapEth';\n\nconst approveERC20ToSpend = async (tokenAddress, spenderAddress, amount, provider) => {\n  const contract = new ethers.Contract(tokenAddress, humanStandardTokenAbi, provider.getSigner(0));\n  return await contract.approve(spenderAddress, amount);\n};\n\nconst getERC20Allowance = async (tokenAddress, ownerAddress, spenderAddress, provider) => {\n  const contract = new ethers.Contract(tokenAddress, humanStandardTokenAbi, provider);\n  return await contract.allowance(ownerAddress, spenderAddress);\n};\n\nconst getERC20BalanceOf = async (tokenAddress, address, provider) => {\n  const contract = new ethers.Contract(tokenAddress, humanStandardTokenAbi, provider);\n  return await contract.balanceOf(address);\n};\n\nconst resolveUnknownERC20 = async function (tokenAddress) {\n  let logoURI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let token;\n  const contract = new ethers.Contract(tokenAddress, humanStandardTokenAbi, defaults.network.provider);\n  const address = await contract.resolvedAddress;\n  const name = await contract.name().then(r => {\n    return r;\n  }).catch(err => console.log(err));\n  const symbol = await contract.symbol().then(r => {\n    return r;\n  }).catch(err => console.log(err));\n  const decimals = await contract.decimals().then(r => {\n    return r.toNumber();\n  }).catch(err => console.log(err));\n\n  if (address && name && symbol && decimals && defaults.network.chainId) {\n    token = {\n      'chainId': defaults.network.chainId,\n      'address': address,\n      'name': name,\n      'symbol': symbol,\n      'decimals': decimals,\n      'logoURI': logoURI\n    };\n  }\n\n  return token;\n};\n\nconst estimateGasCost = async (contractAddress, abi, callName, data, provider) => {\n  const contract = new ethers.Contract(contractAddress, abi, provider.getSigner(0));\n\n  const execute = (name, context, args) => {\n    return context[name](args);\n  };\n\n  return await execute(callName, contract.estimateGas, data);\n};\n\nconst convert = async (proof, amount, minVader, provider) => {\n  const contract = new ethers.Contract(defaults.address.converter, converterAbi, provider.getSigner(0));\n  return await contract.convert(proof, amount, minVader);\n};\n\nconst getClaimed = async leaf => {\n  const contract = new ethers.Contract(defaults.address.converter, converterAbi, defaults.network.provider);\n  return await contract.claimed(leaf);\n};\n\nconst getSalt = async () => {\n  const contract = new ethers.Contract(defaults.address.converter, converterAbi, defaults.network.provider);\n  return await contract.salt();\n};\n\nconst getClaim = async account => {\n  const contract = new ethers.Contract(defaults.address.linearVesting, linearVestingAbi, defaults.network.provider);\n  return await contract.getClaim(account);\n};\n\nconst getVester = async account => {\n  const contract = new ethers.Contract(defaults.address.linearVesting, linearVestingAbi, defaults.network.provider);\n  return await contract.vest(account);\n};\n\nconst claim = async provider => {\n  const contract = new ethers.Contract(defaults.address.linearVesting, linearVestingAbi, provider.getSigner(0));\n  return await contract.claim();\n};\n\nconst stakeVader = async (amount, provider) => {\n  const contract = new ethers.Contract(defaults.address.xvader, xVaderAbi, provider.getSigner(0));\n  return await contract.enter(amount);\n};\n\nconst unstakeVader = async (shares, provider) => {\n  const contract = new ethers.Contract(defaults.address.xvader, xVaderAbi, provider.getSigner(0));\n  return await contract.leave(shares);\n};\n\nconst bondInfo = async (bondContractAddress, depositorAddress) => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.bondInfo(depositorAddress);\n};\n\nconst bondPrice = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.bondPrice();\n};\n\nconst bondCurrentDebt = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.currentDebt();\n};\n\nconst bondDebtDecay = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.debtDecay();\n};\n\nconst bondDebtRatio = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.debtRatio();\n};\n\nconst bondLastDecay = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.lastDecay();\n};\n\nconst bondPayoutFor = async (bondContractAddress, value) => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.payoutFor(value);\n};\n\nconst bondMaxPayout = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.maxPayout();\n};\n\nconst bondPendingPayoutFor = async (bondContractAddress, depositorAccount) => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.pendingPayoutFor(depositorAccount);\n};\n\nconst bondPercentVestedFor = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.percentVestedFor();\n};\n\nconst bondPayoutToken = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.payoutToken();\n};\n\nconst bondPrincipalToken = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.principalToken();\n};\n\nconst bondTerms = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.terms();\n};\n\nconst bondTotalDebt = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.totalDebt();\n};\n\nconst bondTreasury = async bondContractAddress => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, defaults.network.provider);\n  return await contract.treasury();\n};\n\nconst bondDeposit = async (amount, maxPrice, depositor, bondContractAddress, provider) => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, provider.getSigner(0));\n  return await contract.deposit(amount, maxPrice, depositor);\n};\n\nconst bondRedeem = async (bondContractAddress, depositor, provider) => {\n  const contract = new ethers.Contract(bondContractAddress, vaderBond, provider.getSigner(0));\n  return await contract.redeem(depositor);\n};\n\nconst zapDeposit = async (zapContractAddress, amount, minPayout, provider) => {\n  const contract = new ethers.Contract(zapContractAddress, zapEth, provider.getSigner(0));\n  const options = {\n    value: amount\n  };\n  return await contract.zap(minPayout, options);\n};\n\nexport { approveERC20ToSpend, getERC20BalanceOf, resolveUnknownERC20, estimateGasCost, getERC20Allowance, convert, bondInfo, bondPrice, bondCurrentDebt, bondDebtDecay, stakeVader, unstakeVader, bondDebtRatio, bondLastDecay, bondPayoutFor, bondPendingPayoutFor, bondPayoutToken, bondPercentVestedFor, bondPrincipalToken, bondTerms, bondTotalDebt, bondTreasury, bondDeposit, bondRedeem, bondMaxPayout, getSalt, getClaimed, getClaim, getVester, claim, resolveUnknownERC20 as resolveERC20, zapDeposit };","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/common/ethereum.js"],"names":["ethers","humanStandardTokenAbi","converterAbi","defaults","xVaderAbi","linearVestingAbi","vaderBond","zapEth","approveERC20ToSpend","tokenAddress","spenderAddress","amount","provider","contract","Contract","getSigner","approve","getERC20Allowance","ownerAddress","allowance","getERC20BalanceOf","address","balanceOf","resolveUnknownERC20","logoURI","token","network","resolvedAddress","name","then","r","catch","err","console","log","symbol","decimals","toNumber","chainId","estimateGasCost","contractAddress","abi","callName","data","execute","context","args","estimateGas","convert","proof","minVader","converter","getClaimed","leaf","claimed","getSalt","salt","getClaim","account","linearVesting","getVester","vest","claim","stakeVader","xvader","enter","unstakeVader","shares","leave","bondInfo","bondContractAddress","depositorAddress","bondPrice","bondCurrentDebt","currentDebt","bondDebtDecay","debtDecay","bondDebtRatio","debtRatio","bondLastDecay","lastDecay","bondPayoutFor","value","payoutFor","bondMaxPayout","maxPayout","bondPendingPayoutFor","depositorAccount","pendingPayoutFor","bondPercentVestedFor","percentVestedFor","bondPayoutToken","payoutToken","bondPrincipalToken","principalToken","bondTerms","terms","bondTotalDebt","totalDebt","bondTreasury","treasury","bondDeposit","maxPrice","depositor","deposit","bondRedeem","redeem","zapDeposit","zapContractAddress","minPayout","options","zap","resolveERC20"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport humanStandardTokenAbi from '../artifacts/abi/humanStandardToken'\nimport converterAbi from '../artifacts/abi/converter'\nimport defaults from './defaults'\nimport xVaderAbi from '../artifacts/abi/xvader'\nimport linearVestingAbi from '../artifacts/abi/linearVesting'\nimport vaderBond from '../artifacts/abi/vaderBond'\nimport zapEth from '../artifacts/abi/zapEth'\n\nconst approveERC20ToSpend = async (tokenAddress, spenderAddress, amount, provider) => {\n\tconst contract = new ethers.Contract(\n\t\ttokenAddress,\n\t\thumanStandardTokenAbi,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.approve(spenderAddress, amount)\n}\n\nconst getERC20Allowance = async (tokenAddress, ownerAddress, spenderAddress, provider) => {\n\tconst contract = new ethers.Contract(\n\t\ttokenAddress,\n\t\thumanStandardTokenAbi,\n\t\tprovider,\n\t)\n\treturn await contract.allowance(ownerAddress, spenderAddress)\n}\n\nconst getERC20BalanceOf = async (tokenAddress, address, provider) => {\n\tconst contract = new ethers.Contract(\n\t\ttokenAddress,\n\t\thumanStandardTokenAbi,\n\t\tprovider,\n\t)\n\treturn await contract.balanceOf(address)\n}\n\nconst resolveUnknownERC20 = async (tokenAddress, logoURI = '') => {\n\tlet token\n\tconst contract = new ethers.Contract(\n\t\ttokenAddress,\n\t\thumanStandardTokenAbi,\n\t\tdefaults.network.provider,\n\t)\n\tconst address = await contract.resolvedAddress\n\tconst name = await contract.name().then(r => { return r }).catch(err => console.log(err))\n\tconst symbol = await contract.symbol().then(r => { return r }).catch(err => console.log(err))\n\tconst decimals = await contract.decimals().then(r => { return r.toNumber() }).catch(err => console.log(err))\n\n\tif (\n\t\taddress &&\n\t\tname &&\n\t\tsymbol &&\n\t\tdecimals &&\n\t\tdefaults.network.chainId\n\t) {\n\t\ttoken = {\n\t\t\t'chainId':defaults.network.chainId,\n\t\t\t'address':address,\n\t\t\t'name':name,\n\t\t\t'symbol':symbol,\n\t\t\t'decimals':decimals,\n\t\t\t'logoURI':logoURI,\n\t\t}\n\t}\n\treturn token\n}\n\nconst estimateGasCost = async (contractAddress, abi, callName, data, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tcontractAddress,\n\t\tabi,\n\t\tprovider.getSigner(0),\n\t)\n\tconst execute = (name, context, args) => {\n\t\treturn context[name](args)\n\t}\n\treturn await execute(callName, contract.estimateGas, data)\n}\n\nconst convert = async (proof, amount, minVader, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.converter,\n\t\tconverterAbi,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.convert(proof, amount, minVader)\n}\n\nconst getClaimed = async (leaf) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.converter,\n\t\tconverterAbi,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.claimed(leaf)\n}\n\nconst getSalt = async () => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.converter,\n\t\tconverterAbi,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.salt()\n}\n\nconst getClaim = async (account) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.linearVesting,\n\t\tlinearVestingAbi,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.getClaim(account)\n}\n\nconst getVester = async (account) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.linearVesting,\n\t\tlinearVestingAbi,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.vest(account)\n}\n\nconst claim = async (provider) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.linearVesting,\n\t\tlinearVestingAbi,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.claim()\n}\n\nconst stakeVader = async (amount, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.xvader,\n\t\txVaderAbi,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.enter(amount)\n}\n\nconst unstakeVader = async (shares, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tdefaults.address.xvader,\n\t\txVaderAbi,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.leave(shares)\n}\n\nconst bondInfo = async (bondContractAddress, depositorAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.bondInfo(depositorAddress)\n}\n\nconst bondPrice = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.bondPrice()\n}\n\nconst bondCurrentDebt = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.currentDebt()\n}\n\nconst bondDebtDecay = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.debtDecay()\n}\n\nconst bondDebtRatio = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.debtRatio()\n}\n\nconst bondLastDecay = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.lastDecay()\n}\n\nconst bondPayoutFor = async (bondContractAddress, value) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.payoutFor(value)\n}\n\nconst bondMaxPayout = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.maxPayout()\n}\n\nconst bondPendingPayoutFor = async (bondContractAddress, depositorAccount) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.pendingPayoutFor(depositorAccount)\n}\n\nconst bondPercentVestedFor = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.percentVestedFor()\n}\n\nconst bondPayoutToken = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.payoutToken()\n}\n\nconst bondPrincipalToken = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.principalToken()\n}\n\nconst bondTerms = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.terms()\n}\n\nconst bondTotalDebt = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.totalDebt()\n}\n\nconst bondTreasury = async (bondContractAddress) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tdefaults.network.provider,\n\t)\n\treturn await contract.treasury()\n}\n\nconst bondDeposit = async (amount, maxPrice, depositor, bondContractAddress, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.deposit(amount, maxPrice, depositor)\n}\n\nconst bondRedeem = async (bondContractAddress, depositor, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tbondContractAddress,\n\t\tvaderBond,\n\t\tprovider.getSigner(0),\n\t)\n\treturn await contract.redeem(depositor)\n}\n\nconst zapDeposit = async (zapContractAddress, amount, minPayout, provider) => {\n\tconst contract = new ethers.Contract(\n\t\tzapContractAddress,\n\t\tzapEth,\n\t\tprovider.getSigner(0),\n\t)\n\tconst options = {\n\t\tvalue: amount,\n\t}\n\treturn await contract.zap(minPayout, options)\n}\n\nexport {\n\tapproveERC20ToSpend, getERC20BalanceOf, resolveUnknownERC20,\n\testimateGasCost, getERC20Allowance,\n\tconvert, bondInfo, bondPrice, bondCurrentDebt,\n\tbondDebtDecay, stakeVader, unstakeVader,\n\tbondDebtRatio, bondLastDecay, bondPayoutFor,\n\tbondPendingPayoutFor, bondPayoutToken, bondPercentVestedFor,\n\tbondPrincipalToken, bondTerms, bondTotalDebt, bondTreasury,\n\tbondDeposit, bondRedeem, bondMaxPayout,\n\tgetSalt, getClaimed, getClaim, getVester,\n\tclaim, resolveUnknownERC20 as resolveERC20,\n\tzapDeposit,\n}\n"]},"metadata":{},"sourceType":"module"}