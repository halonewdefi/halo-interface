{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum';\nexport const useMintLimitRemains = function () {\n  _s();\n\n  var _limits$data2;\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const {\n    data: minter\n  } = useQuery('minter', async () => {\n    return await getMinter();\n  }, {\n    staleTime: staleTime\n  });\n  const limits = useQuery('dailyLimits', async () => {\n    return await getMinterDailyLimits(minter);\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n  const {\n    data: cycleMints,\n    refetch: refetch\n  } = useQuery('cycleMints', async () => {\n    return await getCycleMints(minter);\n  }, {\n    staleTime: defaults.api.staleTime\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n\n  if (limits !== null && limits !== void 0 && limits.data && cycleMints) {\n    var _limits$data;\n\n    console.log(limits === null || limits === void 0 ? void 0 : (_limits$data = limits.data) === null || _limits$data === void 0 ? void 0 : _limits$data[1].sub(cycleMints));\n  }\n\n  return [limits !== null && limits !== void 0 && limits.data && cycleMints ? limits === null || limits === void 0 ? void 0 : (_limits$data2 = limits.data) === null || _limits$data2 === void 0 ? void 0 : _limits$data2[1].sub(cycleMints) : BigNumber.from('0'), refetch];\n};\n\n_s(useMintLimitRemains, \"KmSY9yAnRHltpncY738QPEJtxWA=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useMintLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleMints","useMintLimitRemains","staleTime","api","data","minter","limits","enabled","cycleMints","refetch","console","log","sub","from"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAM;AAAEE,IAAAA,IAAI,EAAEC;AAAR,MAAmBT,QAAQ,CAAC,QAAD,EAAW,YAAY;AACvD,WAAO,MAAME,SAAS,EAAtB;AACA,GAFgC,EAE9B;AACFI,IAAAA,SAAS,EAAEA;AADT,GAF8B,CAAjC;AAOA,QAAMI,MAAM,GAAGV,QAAQ,CAAC,aAAD,EAAgB,YAAY;AAClD,WAAO,MAAMG,oBAAoB,CAACM,MAAD,CAAjC;AACA,GAFsB,EAEpB;AACFH,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAE,CAAC,CAACF;AAFT,GAFoB,CAAvB;AAQA,QAAM;AAAED,IAAAA,IAAI,EAAEI,UAAR;AAAoBC,IAAAA,OAAO,EAAEA;AAA7B,MAAyCb,QAAQ,CAAC,YAAD,EACtD,YAAY;AACX,WAAO,MAAMI,aAAa,CAACK,MAAD,CAA1B;AACA,GAHqD,EAGnD;AACFH,IAAAA,SAAS,EAAEL,QAAQ,CAACM,GAAT,CAAaD;AADtB,GAHmD,EAKnD;AACFA,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAE,CAAC,CAACF;AAFT,GALmD,CAAvD;;AAWA,MAAGC,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEF,IAAR,IAAgBI,UAAnB,EAA+B;AAAA;;AAC9BE,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,aAAYA,MAAZ,uCAAYA,MAAM,CAAEF,IAApB,iDAAY,aAAe,CAAf,EAAkBQ,GAAlB,CAAsBJ,UAAtB,CAAZ;AACA;;AAED,SAAO,CACNF,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEF,IAAR,IAAgBI,UAAhB,GAA6BF,MAA7B,aAA6BA,MAA7B,wCAA6BA,MAAM,CAAEF,IAArC,kDAA6B,cAAe,CAAf,EAAkBQ,GAAlB,CAAsBJ,UAAtB,CAA7B,GAAiEb,SAAS,CAACkB,IAAV,CAAe,GAAf,CAD3D,EAENJ,OAFM,CAAP;AAIA,CApCM;;GAAMR,mB;UAEaL,Q,EAOVA,Q,EAQgCA,Q","sourcesContent":["import { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum'\n\nexport const useMintLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst { data: minter } = useQuery('minter', async () => {\n\t\treturn await getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\n\tconst limits = useQuery('dailyLimits', async () => {\n\t\treturn await getMinterDailyLimits(minter)\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !!minter,\n\t},\n\t)\n\n\tconst { data: cycleMints, refetch: refetch } = useQuery('cycleMints',\n\t\tasync () => {\n\t\t\treturn await getCycleMints(minter)\n\t\t}, {\n\t\t\tstaleTime: defaults.api.staleTime,\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t\tenabled: !!minter,\n\t\t},\n\t)\n\n\tif(limits?.data && cycleMints) {\n\t\tconsole.log(limits?.data?.[1].sub(cycleMints))\n\t}\n\n\treturn [\n\t\tlimits?.data && cycleMints ? limits?.data?.[1].sub(cycleMints) : BigNumber.from('0'),\n\t\trefetch]\n\n}"]},"metadata":{},"sourceType":"module"}