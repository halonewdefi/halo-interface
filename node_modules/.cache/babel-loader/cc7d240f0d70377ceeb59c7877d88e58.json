{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { uniswapV2GetReserves } from '../common/ethereum';\nexport const useUniswapV2Price = function (pairAddress) {\n  _s();\n\n  let principalPrice = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let rpc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let swapBaseAsset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let pollInterval = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : defaults.api.staleTime;\n\n  if (!rpc) {\n    const query = gql`\n\t\tquery {\n\t\t\tpairs (\n\t\t\t\twhere: {\n\t\t\t\t\tid: \"${String(pairAddress).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t\t) {\n\t\t\t\t\ttoken0Price\n\t\t\t\t\ttoken1Price\n\t\t\t\t\t${principalPrice ? `\n\t\t\t\t\treserve0\n\t\t\t\t\treserve1\n\t\t\t\t\ttotalSupply\n\t\t\t\t\t` : ''}\n\t\t\t\t}\n\t\t}`;\n    const {\n      data,\n      error,\n      loading\n    } = useApolloQuery(query, {\n      client: defaults.api.graphql.client.uniswapV2,\n      pollInterval: pollInterval\n    });\n\n    if (principalPrice) {\n      var _data$pairs, _data$pairs$, _data$pairs2, _data$pairs2$, _data$pairs3, _data$pairs3$, _data$pairs4, _data$pairs4$;\n\n      const tvl = Number((data === null || data === void 0 ? void 0 : (_data$pairs = data.pairs) === null || _data$pairs === void 0 ? void 0 : (_data$pairs$ = _data$pairs[0]) === null || _data$pairs$ === void 0 ? void 0 : _data$pairs$.reserve0) * (data === null || data === void 0 ? void 0 : (_data$pairs2 = data.pairs) === null || _data$pairs2 === void 0 ? void 0 : (_data$pairs2$ = _data$pairs2[0]) === null || _data$pairs2$ === void 0 ? void 0 : _data$pairs2$.token1Price)) + Number(data === null || data === void 0 ? void 0 : (_data$pairs3 = data.pairs) === null || _data$pairs3 === void 0 ? void 0 : (_data$pairs3$ = _data$pairs3[0]) === null || _data$pairs3$ === void 0 ? void 0 : _data$pairs3$.reserve1);\n      const price = Number(tvl / (data === null || data === void 0 ? void 0 : (_data$pairs4 = data.pairs) === null || _data$pairs4 === void 0 ? void 0 : (_data$pairs4$ = _data$pairs4[0]) === null || _data$pairs4$ === void 0 ? void 0 : _data$pairs4$.totalSupply));\n      return [price && tvl ? {\n        totalValueLocked: tvl,\n        principalPrice: price\n      } : undefined, loading, error];\n    }\n\n    return [data, loading, error];\n  } else {\n    const reserves = useQuery(`${pairAddress}_uniswapV2_reserves`, async () => {\n      if (pairAddress) {\n        return await uniswapV2GetReserves(pairAddress);\n      }\n    }, {\n      staleTime: staleTime\n    });\n\n    if (reserves !== null && reserves !== void 0 && reserves.data) {\n      if (swapBaseAsset === true) {\n        var _reserves$data, _reserves$data$_reser, _reserves$data2;\n\n        console.log(reserves === null || reserves === void 0 ? void 0 : (_reserves$data = reserves.data) === null || _reserves$data === void 0 ? void 0 : (_reserves$data$_reser = _reserves$data._reserve1) === null || _reserves$data$_reser === void 0 ? void 0 : _reserves$data$_reser.div(reserves === null || reserves === void 0 ? void 0 : (_reserves$data2 = reserves.data) === null || _reserves$data2 === void 0 ? void 0 : _reserves$data2._reserve0));\n      } else {\n        var _reserves$data3, _reserves$data4, _reserves$data4$_rese, _reserves$data5;\n\n        console.log(reserves === null || reserves === void 0 ? void 0 : (_reserves$data3 = reserves.data) === null || _reserves$data3 === void 0 ? void 0 : _reserves$data3._reserve0);\n        console.log(reserves === null || reserves === void 0 ? void 0 : (_reserves$data4 = reserves.data) === null || _reserves$data4 === void 0 ? void 0 : (_reserves$data4$_rese = _reserves$data4._reserve0) === null || _reserves$data4$_rese === void 0 ? void 0 : _reserves$data4$_rese.div(reserves === null || reserves === void 0 ? void 0 : (_reserves$data5 = reserves.data) === null || _reserves$data5 === void 0 ? void 0 : _reserves$data5._reserve1));\n      }\n    }\n  }\n};\n\n_s(useUniswapV2Price, \"QHLwEc18djGq9jt1H9h6hqfmfnw=\", false, function () {\n  return [useApolloQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useUniswapV2Price.js"],"names":["useQuery","useApolloQuery","gql","defaults","uniswapV2GetReserves","useUniswapV2Price","pairAddress","principalPrice","rpc","swapBaseAsset","pollInterval","api","graphql","staleTime","query","String","toLowerCase","data","error","loading","client","uniswapV2","tvl","Number","pairs","reserve0","token1Price","reserve1","price","totalSupply","totalValueLocked","undefined","reserves","console","log","_reserve1","div","_reserve0"],"mappings":"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","sourcesContent":["import { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { uniswapV2GetReserves } from '../common/ethereum'\n\nexport const useUniswapV2Price = (pairAddress, principalPrice = false, rpc = false, swapBaseAsset = false, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\tconst query = gql`\n\t\tquery {\n\t\t\tpairs (\n\t\t\t\twhere: {\n\t\t\t\t\tid: \"${String(pairAddress).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t\t) {\n\t\t\t\t\ttoken0Price\n\t\t\t\t\ttoken1Price\n\t\t\t\t\t${principalPrice ? `\n\t\t\t\t\treserve0\n\t\t\t\t\treserve1\n\t\t\t\t\ttotalSupply\n\t\t\t\t\t` : ''}\n\t\t\t\t}\n\t\t}`\n\n\t\tconst { data, error, loading } = useApolloQuery(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\tclient: defaults.api.graphql.client.uniswapV2,\n   \t\tpollInterval: pollInterval,\n\t\t\t},\n\t\t)\n\n\t\tif(principalPrice) {\n\t\t\tconst tvl = Number((data?.pairs?.[0]?.reserve0) * (data?.pairs?.[0]?.token1Price)) + Number(data?.pairs?.[0]?.reserve1)\n\t\t\tconst price = Number((tvl) / (data?.pairs?.[0]?.totalSupply))\n\t\t\treturn [price && tvl ? {\n\t\t\t\ttotalValueLocked: tvl,\n\t\t\t\tprincipalPrice: price,\n\t\t\t} : undefined, loading, error]\n\t\t}\n\n\t\treturn [data, loading, error]\n\t}\n\telse {\n\n\t\tconst reserves = useQuery(`${pairAddress}_uniswapV2_reserves`,\n\t\t\tasync () => {\n\t\t\t\tif (pairAddress) {\n\t\t\t\t\treturn await uniswapV2GetReserves(pairAddress)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (reserves?.data) {\n\t\t\tif(swapBaseAsset === true) {\n\t\t\t\tconsole.log(reserves?.data?._reserve1?.div(reserves?.data?._reserve0))\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(reserves?.data?._reserve0)\n\t\t\t\tconsole.log(reserves?.data?._reserve0?.div(reserves?.data?._reserve1))\n\t\t\t}\n\t\t}\n\n\t}\n}"]},"metadata":{},"sourceType":"module"}