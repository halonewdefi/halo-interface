{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from '../hooks/useERC20Balance';\nimport { utils } from 'ethers';\nexport const useRewardsAPY = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const TWAprice = useUniswapTWAP();\n  const balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n    const rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`, async () => {\n      return await getRewardRate();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n\n    if (TWAprice !== null && TWAprice !== void 0 && TWAprice.data && balance !== null && balance !== void 0 && balance.data && virtualPrice !== null && virtualPrice !== void 0 && virtualPrice.data && rewardRate !== null && rewardRate !== void 0 && rewardRate.data) {\n      var _balance$data, _rewardRate$data;\n\n      const year = 31536000;\n      const tvl = balance === null || balance === void 0 ? void 0 : (_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : _balance$data.div(virtualPrice === null || virtualPrice === void 0 ? void 0 : virtualPrice.data);\n      const rewardRatePerUSDperSecond = rewardRate === null || rewardRate === void 0 ? void 0 : (_rewardRate$data = rewardRate.data) === null || _rewardRate$data === void 0 ? void 0 : _rewardRate$data.div(tvl);\n      const APRperYear = rewardRatePerUSDperSecond.mul(year).mul(TWAprice === null || TWAprice === void 0 ? void 0 : TWAprice.data);\n      return utils.formatEther(APRperYear.div(1e18));\n    }\n  }\n};\n\n_s(useRewardsAPY, \"mzE9Imt9qL1oLk24Co/dunJyKPs=\", false, function () {\n  return [useUniswapTWAP, useERC20Balance, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsAPY.js"],"names":["useQuery","useApolloQuery","gql","getRewardRate","getVirtualPrice","defaults","useUniswapTWAP","useERC20Balance","utils","useRewardsAPY","rpc","pollInterval","api","graphql","staleTime","TWAprice","balance","address","usdv3crvf","stakingRewards","virtualPrice","rewardRate","data","year","tvl","div","rewardRatePerUSDperSecond","APRperYear","mul","formatEther"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,aAAT,EAAwBC,eAAxB,QAA+C,oBAA/C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;AAElI,QAAMC,QAAQ,GAAGT,cAAc,EAA/B;AACA,QAAMU,OAAO,GAAGT,eAAe,CAACF,QAAQ,CAACY,OAAT,CAAiBC,SAAlB,EAA6Bb,QAAQ,CAACY,OAAT,CAAiBE,cAA9C,CAA/B;;AAGA,MAAI,CAACT,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMU,YAAY,GAAGpB,QAAQ,CAAE,iBAAgBK,QAAQ,CAACY,OAAT,CAAiBC,SAAU,EAA7C,EAC5B,YAAY;AACX,aAAO,MAAMd,eAAe,EAA5B;AACA,KAH2B,EAGzB;AACFU,MAAAA,SAAS,EAAET,QAAQ,CAACO,GAAT,CAAaE;AADtB,KAHyB,CAA7B;AAQA,UAAMO,UAAU,GAAGrB,QAAQ,CAAE,cAAaK,QAAQ,CAACY,OAAT,CAAiBE,cAAe,EAA/C,EAC1B,YAAY;AACX,aAAO,MAAMhB,aAAa,EAA1B;AACA,KAHyB,EAGvB;AACFW,MAAAA,SAAS,EAAET,QAAQ,CAACO,GAAT,CAAaE;AADtB,KAHuB,CAA3B;;AAQA,QAAIC,QAAQ,SAAR,IAAAA,QAAQ,WAAR,IAAAA,QAAQ,CAAEO,IAAV,IACHN,OADG,aACHA,OADG,eACHA,OAAO,CAAEM,IADN,IAEHF,YAFG,aAEHA,YAFG,eAEHA,YAAY,CAAEE,IAFX,IAGHD,UAHG,aAGHA,UAHG,eAGHA,UAAU,CAAEC,IAHb,EAGmB;AAAA;;AAElB,YAAMC,IAAI,GAAG,QAAb;AACA,YAAMC,GAAG,GAAGR,OAAH,aAAGA,OAAH,wCAAGA,OAAO,CAAEM,IAAZ,kDAAG,cAAeG,GAAf,CAAmBL,YAAnB,aAAmBA,YAAnB,uBAAmBA,YAAY,CAAEE,IAAjC,CAAZ;AACA,YAAMI,yBAAyB,GAAGL,UAAH,aAAGA,UAAH,2CAAGA,UAAU,CAAEC,IAAf,qDAAG,iBAAkBG,GAAlB,CAAsBD,GAAtB,CAAlC;AAEA,YAAMG,UAAU,GAAGD,yBAAyB,CAACE,GAA1B,CAA8BL,IAA9B,EAAoCK,GAApC,CAAwCb,QAAxC,aAAwCA,QAAxC,uBAAwCA,QAAQ,CAAEO,IAAlD,CAAnB;AACA,aAAOd,KAAK,CAACqB,WAAN,CAAkBF,UAAU,CAACF,GAAX,CAAe,IAAf,CAAlB,CAAP;AAEA;AACD;AAED,CA1CM;;GAAMhB,a;UAEKH,c,EACDC,e,EAQMP,Q,EAQFA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from '../hooks/useERC20Balance'\nimport { utils } from 'ethers'\n\nexport const useRewardsAPY = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tconst rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getRewardRate()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (TWAprice?.data &&\n\t\t\tbalance?.data &&\n\t\t\tvirtualPrice?.data &&\n\t\t\trewardRate?.data) {\n\n\t\t\tconst year = 31536000\n\t\t\tconst tvl = balance?.data?.div(virtualPrice?.data)\n\t\t\tconst rewardRatePerUSDperSecond = rewardRate?.data?.div(tvl)\n\n\t\t\tconst APRperYear = rewardRatePerUSDperSecond.mul(year).mul(TWAprice?.data)\n\t\t\treturn utils.formatEther(APRperYear.div(1e18))\n\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}