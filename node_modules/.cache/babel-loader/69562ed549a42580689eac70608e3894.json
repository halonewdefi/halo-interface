{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum';\nexport const useMintLimitRemains = function () {\n  _s();\n\n  var _limits$data;\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const {\n    data: minter\n  } = useQuery('minter', () => {\n    return getMinter();\n  }, {\n    staleTime: staleTime\n  });\n  const limits = useQuery('dailyLimits', () => {\n    return getMinterDailyLimits(minter);\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n  const cycleMints = useQuery('cycleMints', async () => {\n    console.log(minter);\n    return getCycleMints(minter);\n  }, {\n    staleTime: defaults.api.staleTime\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter && !!limits\n  });\n  console.log(cycleMints);\n\n  if (limits !== null && limits !== void 0 && (_limits$data = limits.data) !== null && _limits$data !== void 0 && _limits$data[1] && cycleMints.data) {\n    var _limits$data2;\n\n    return limits === null || limits === void 0 ? void 0 : (_limits$data2 = limits.data) === null || _limits$data2 === void 0 ? void 0 : _limits$data2[1].sub(cycleMints.data);\n  } else {\n    return BigNumber.from('0');\n  }\n};\n\n_s(useMintLimitRemains, \"/U7j0fxwu8T7iW70GzN9dJ3MCx0=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useMintLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleMints","useMintLimitRemains","staleTime","api","data","minter","limits","enabled","cycleMints","console","log","sub","from"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAM;AAAEE,IAAAA,IAAI,EAAEC;AAAR,MAAmBT,QAAQ,CAAC,QAAD,EAAW,MAAM;AACjD,WAAOE,SAAS,EAAhB;AACA,GAFgC,EAE9B;AACFI,IAAAA,SAAS,EAAEA;AADT,GAF8B,CAAjC;AAOA,QAAMI,MAAM,GAAGV,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5C,WAAOG,oBAAoB,CAACM,MAAD,CAA3B;AACA,GAFsB,EAEpB;AACFH,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAE,CAAC,CAACF;AAFT,GAFoB,CAAvB;AAQA,QAAMG,UAAU,GAAGZ,QAAQ,CAAC,YAAD,EAC1B,YAAY;AACXa,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,WAAOL,aAAa,CAACK,MAAD,CAApB;AACA,GAJyB,EAIvB;AACFH,IAAAA,SAAS,EAAEL,QAAQ,CAACM,GAAT,CAAaD;AADtB,GAJuB,EAMvB;AACFA,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAG,CAAC,CAACF,MAAF,IAAY,CAAC,CAACC;AAFtB,GANuB,CAA3B;AAYAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AAEA,MAAGF,MAAM,SAAN,IAAAA,MAAM,WAAN,oBAAAA,MAAM,CAAEF,IAAR,sDAAe,CAAf,KAAqBI,UAAU,CAACJ,IAAnC,EAAyC;AAAA;;AACxC,WAAOE,MAAP,aAAOA,MAAP,wCAAOA,MAAM,CAAEF,IAAf,kDAAO,cAAe,CAAf,EAAkBO,GAAlB,CAAsBH,UAAU,CAACJ,IAAjC,CAAP;AACA,GAFD,MAGK;AACJ,WAAOT,SAAS,CAACiB,IAAV,CAAe,GAAf,CAAP;AACA;AAED,CAtCM;;GAAMX,mB;UAEaL,Q,EAOVA,Q,EAQIA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum'\n\nexport const useMintLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst { data: minter } = useQuery('minter', () => {\n\t\treturn getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\n\tconst limits = useQuery('dailyLimits', () => {\n\t\treturn getMinterDailyLimits(minter)\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !!minter,\n\t},\n\t)\n\n\tconst cycleMints = useQuery('cycleMints',\n\t\tasync () => {\n\t\t\tconsole.log(minter)\n\t\t\treturn getCycleMints(minter)\n\t\t}, {\n\t\t\tstaleTime: defaults.api.staleTime,\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t\tenabled: (!!minter && !!limits),\n\t\t},\n\t)\n\n\tconsole.log(cycleMints)\n\n\tif(limits?.data?.[1] && cycleMints.data) {\n\t\treturn limits?.data?.[1].sub(cycleMints.data)\n\t}\n\telse {\n\t\treturn BigNumber.from('0')\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}