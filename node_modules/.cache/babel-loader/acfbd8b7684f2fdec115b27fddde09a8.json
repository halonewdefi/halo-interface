{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from './useERC20Balance';\nimport { utils } from 'ethers';\nexport const useRewardsTVL = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const virtualPrice = useQuery(`virtualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n\n    if (balance !== null && balance !== void 0 && balance.data && virtualPrice !== null && virtualPrice !== void 0 && virtualPrice.data) {\n      var _balance$data, _balance$data2;\n\n      const tvl = balance === null || balance === void 0 ? void 0 : (_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : _balance$data.div(virtualPrice === null || virtualPrice === void 0 ? void 0 : virtualPrice.data);\n      console.log(tvl);\n      return balance === null || balance === void 0 ? void 0 : (_balance$data2 = balance.data) === null || _balance$data2 === void 0 ? void 0 : _balance$data2.div(virtualPrice === null || virtualPrice === void 0 ? void 0 : virtualPrice.data);\n    }\n  }\n};\n\n_s(useRewardsTVL, \"JmKdkLcDISma6UJmPQ1y8dXi318=\", false, function () {\n  return [useERC20Balance, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsTVL.js"],"names":["useQuery","useApolloQuery","gql","getRewardRate","getVirtualPrice","defaults","useUniswapTWAP","useERC20Balance","utils","useRewardsTVL","rpc","pollInterval","api","graphql","staleTime","balance","address","usdv3crvf","stakingRewards","virtualPrice","data","tvl","div","console","log"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,aAAT,EAAwBC,eAAxB,QAA+C,oBAA/C;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;AAElI,QAAMC,OAAO,GAAGR,eAAe,CAACF,QAAQ,CAACW,OAAT,CAAiBC,SAAlB,EAA6BZ,QAAQ,CAACW,OAAT,CAAiBE,cAA9C,CAA/B;;AAEA,MAAI,CAACR,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMS,YAAY,GAAGnB,QAAQ,CAAE,gBAAeK,QAAQ,CAACW,OAAT,CAAiBC,SAAU,EAA5C,EAC5B,YAAY;AACX,aAAO,MAAMb,eAAe,EAA5B;AACA,KAH2B,EAGzB;AACFU,MAAAA,SAAS,EAAET,QAAQ,CAACO,GAAT,CAAaE;AADtB,KAHyB,CAA7B;;AAQA,QAAIC,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEK,IAAT,IACHD,YADG,aACHA,YADG,eACHA,YAAY,CAAEC,IADf,EACqB;AAAA;;AACpB,YAAMC,GAAG,GAAGN,OAAH,aAAGA,OAAH,wCAAGA,OAAO,CAAEK,IAAZ,kDAAG,cAAeE,GAAf,CAAmBH,YAAnB,aAAmBA,YAAnB,uBAAmBA,YAAY,CAAEC,IAAjC,CAAZ;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAON,OAAP,aAAOA,OAAP,yCAAOA,OAAO,CAAEK,IAAhB,mDAAO,eAAeE,GAAf,CAAmBH,YAAnB,aAAmBA,YAAnB,uBAAmBA,YAAY,CAAEC,IAAjC,CAAP;AACA;AACD;AAED,CAzBM;;GAAMX,a;UAEIF,e,EAOMP,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getRewardRate, getVirtualPrice } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from './useERC20Balance'\nimport { utils } from 'ethers'\n\nexport const useRewardsTVL = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst virtualPrice = useQuery(`virtualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (balance?.data &&\n\t\t\tvirtualPrice?.data) {\n\t\t\tconst tvl = balance?.data?.div(virtualPrice?.data)\n\t\t\tconsole.log(tvl)\n\t\t\treturn balance?.data?.div(virtualPrice?.data)\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}