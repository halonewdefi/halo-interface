{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MerkleTree } from 'merkletreejs';\nimport getTokenList from 'get-token-list';\nimport defaults from './defaults';\n\nconst prettifyAddress = address => {\n  return `${address.substring(0, 7)}...${address.substring(address.length - 4, address.length)}`;\n};\n\nconst prettifyCurrency = function (amount) {\n  let minFractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let maxFractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let currency = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'USD';\n  let locales = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'en-US';\n  let symbol = '';\n  let symbolPrepended = false;\n  let cryptocurrency = false;\n  let options = {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: minFractionDigits,\n    maximumFractionDigits: maxFractionDigits\n  };\n\n  if (currency === 'ETH' || currency === 'WETH') {\n    options = {\n      style: 'decimal',\n      minimumFractionDigits: minFractionDigits,\n      maximumFractionDigits: maxFractionDigits\n    };\n    symbol = 'Îž';\n    symbolPrepended = false;\n    cryptocurrency = true;\n  }\n\n  if (currency === 'VETH') {\n    options = {\n      style: 'decimal',\n      minimumFractionDigits: minFractionDigits,\n      maximumFractionDigits: maxFractionDigits\n    };\n    symbol = 'VETH';\n    symbolPrepended = false;\n    cryptocurrency = true;\n  }\n\n  if (currency === 'VADER') {\n    options = {\n      style: 'decimal',\n      minimumFractionDigits: minFractionDigits,\n      maximumFractionDigits: maxFractionDigits\n    };\n    symbol = 'VADER';\n    symbolPrepended = false;\n    cryptocurrency = true;\n  }\n\n  if (currency === 'USDV') {\n    options = {\n      style: 'decimal',\n      minimumFractionDigits: minFractionDigits,\n      maximumFractionDigits: maxFractionDigits\n    };\n    symbol = 'USDV';\n    symbolPrepended = false;\n    cryptocurrency = true;\n  }\n\n  const currencyValue = new Intl.NumberFormat(locales, options);\n  return cryptocurrency ? `${symbolPrepended ? symbol + '\\u00A0' : ''}${currencyValue.format(amount)}${symbolPrepended ? '' : '\\u00A0' + symbol}` : currencyValue.format(amount);\n};\n\nconst prettifyNumber = function (amount) {\n  let minFractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let maxFractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let locales = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'en-US';\n  let notation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'standard';\n  const options = {\n    minimumFractionDigits: minFractionDigits,\n    maximumFractionDigits: maxFractionDigits,\n    notation: notation\n  };\n  const value = isFinite(amount) ? amount : 0;\n  return new Intl.NumberFormat(locales, options).format(value);\n};\n\nconst getPercentage = function (amount) {\n  let minFractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let maxFractionDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let locales = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'en-US';\n  const options = {\n    style: 'percent',\n    minimumFractionDigits: minFractionDigits,\n    maximumFractionDigits: maxFractionDigits\n  };\n  const value = isFinite(amount) ? amount : 0;\n  return new Intl.NumberFormat(locales, options).format(value);\n};\n\nconst getDateFromSeconds = seconds => {\n  return new Date(seconds * 1000);\n};\n\nconst getSecondsToGo = date => {\n  const time = (Date.now() / 1000).toFixed();\n  return Number(date - time);\n};\n\nconst promiseAllProgress = (promises, tickCallback) => {\n  const numPromises = promises.length;\n  let progress = 0;\n\n  function tick(promise) {\n    promise.then(() => {\n      progress++;\n      typeof tickCallback === 'function' && tickCallback(progress / numPromises);\n    });\n    return promise;\n  }\n\n  return Promise.all(promises.map(tick));\n};\n\nconst searchFor = function (array, string, callBack) {\n  let regEx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new RegExp(`(${string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})+`, 'gi');\n  const object = array.reduce((acc, item, index) => {\n    if (Object.keys(item).find(key => String(item[key]).match(regEx))) acc[index] = item;\n    return acc;\n  }, {});\n\n  if (callBack) {\n    callBack(Object.values(object));\n  } else {\n    return Object.values(object);\n  }\n};\n\nconst isEthereumAddress = string => {\n  const regEx = new RegExp('^0x[a-fA-F0-9]{40}$');\n  return regEx.test(string);\n};\n\nconst addUnknownTokenToList = (tokenList, newToken) => {\n  if (!newToken) {\n    return tokenList;\n  }\n\n  const newList = tokenList;\n  const index = newList.findIndex(token => token.chainId == newToken.chainId && token.address.toLowerCase() == newToken.address.toLowerCase());\n\n  if (index >= 0) {\n    newList[index] = {\n      'chainId': newToken.chainId || newList[index].chainId,\n      'address': newToken.address || newList[index].address,\n      'name': newToken.name || newList[index].name,\n      'symbol': newToken.symbol || newList[index].symbol,\n      'decimals': newToken.decimals || newList[index].decimals,\n      'logoURI': newToken.logoURI || newList[index].logoURI\n    };\n  } else {\n    newList.push(newToken);\n  }\n\n  return newList;\n};\n\nconst getCombinedTokenListFromSources = sources => {\n  return Promise.all(sources.filter(source => source.enabled === true).map(source => {\n    const p = getTokenList(source.url).then(d => d.tokens.filter(token => token.chainId == defaults.network.chainId));\n    return p;\n  })).then(data => {\n    return data.flat();\n  });\n};\n\nconst getTokenByAddress = async address => {\n  const list = await getCombinedTokenListFromSources(defaults.tokenList.sources);\n  const tokenObj = await list.find(token => token.address === String(address));\n  return tokenObj;\n};\n\nconst getStartOfTheDayTimeStamp = () => {\n  const today = new Date();\n  const dd = String(today.getUTCDate()).padStart(2, '0');\n  const mm = String(today.getUTCMonth() + 1).padStart(2, '0');\n  const yyyy = today.getUTCFullYear();\n  const currentDate = `${yyyy}-${mm}-${dd}`;\n  return Math.floor(new Date(currentDate).getTime() / 1000);\n};\n\nconst getMerkleLeaf = (account, amount) => {\n  if (account && amount) {\n    const digest = ethers.utils.solidityKeccak256(['address', 'uint256', 'uint256', 'uint256'], [account, amount, defaults.redeemables[0].salt, defaults.network.chainId]);\n    return digest;\n  }\n};\n\nconst getMerkleProofForAccount = (account, snapshot) => {\n  const keccak256 = require('keccak256');\n\n  const leaves = [];\n\n  for (const [acc, amt] of Object.entries(snapshot)) {\n    if (amt != '0') {\n      const digest = getMerkleLeaf(acc, amt);\n      leaves.push(digest);\n    }\n  }\n\n  const tree = new MerkleTree(leaves, keccak256, {\n    hashLeaves: false,\n    sortPairs: true\n  });\n  const leaf = getMerkleLeaf(account, snapshot[account]);\n  const proof = tree.getHexProof(leaf);\n  return proof;\n};\n\nconst calculateDifference = (value1, value2) => value1 > value2 ? (value1 - value2) / value2 : (value1 - value2) / value1;\n\nconst calculateDifference2 = (value1, value2) => {\n  if (value1._isBigNumber) value1.gt(value2) ? value1.sub(value2).div(value2) : value1.sub(value2).div(value1);\n};\n\nexport { prettifyAddress, prettifyCurrency, prettifyNumber, getPercentage, getSecondsToGo, promiseAllProgress, searchFor, isEthereumAddress, addUnknownTokenToList, getCombinedTokenListFromSources, getTokenByAddress, getStartOfTheDayTimeStamp, getMerkleProofForAccount, getMerkleLeaf, calculateDifference, getDateFromSeconds, calculateDifference2 };","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/common/utils.js"],"names":["ethers","MerkleTree","getTokenList","defaults","prettifyAddress","address","substring","length","prettifyCurrency","amount","minFractionDigits","maxFractionDigits","currency","locales","symbol","symbolPrepended","cryptocurrency","options","style","minimumFractionDigits","maximumFractionDigits","currencyValue","Intl","NumberFormat","format","prettifyNumber","notation","value","isFinite","getPercentage","getDateFromSeconds","seconds","Date","getSecondsToGo","date","time","now","toFixed","Number","promiseAllProgress","promises","tickCallback","numPromises","progress","tick","promise","then","Promise","all","map","searchFor","array","string","callBack","regEx","RegExp","replace","object","reduce","acc","item","index","Object","keys","find","key","String","match","values","isEthereumAddress","test","addUnknownTokenToList","tokenList","newToken","newList","findIndex","token","chainId","toLowerCase","name","decimals","logoURI","push","getCombinedTokenListFromSources","sources","filter","source","enabled","p","url","d","tokens","network","data","flat","getTokenByAddress","list","tokenObj","getStartOfTheDayTimeStamp","today","dd","getUTCDate","padStart","mm","getUTCMonth","yyyy","getUTCFullYear","currentDate","Math","floor","getTime","getMerkleLeaf","account","digest","utils","solidityKeccak256","redeemables","salt","getMerkleProofForAccount","snapshot","keccak256","require","leaves","amt","entries","tree","hashLeaves","sortPairs","leaf","proof","getHexProof","calculateDifference","value1","value2","calculateDifference2","_isBigNumber","gt","sub","div"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport { MerkleTree } from 'merkletreejs'\nimport getTokenList from 'get-token-list'\nimport defaults from './defaults'\n\nconst prettifyAddress = (address) => {\n\treturn `${address.substring(0, 7)}...${address.substring(address.length - 4, address.length)}`\n}\n\nconst prettifyCurrency = (amount, minFractionDigits = 0, maxFractionDigits = 2, currency = 'USD', locales = 'en-US') => {\n\tlet symbol = ''\n\tlet symbolPrepended = false\n\tlet cryptocurrency = false\n\tlet options = {\n\t\tstyle: 'currency',\n\t\tcurrency: currency,\n\t\tminimumFractionDigits: minFractionDigits,\n\t\tmaximumFractionDigits: maxFractionDigits,\n\t}\n\n\tif (currency === 'ETH' || currency === 'WETH') {\n\t\toptions = {\n\t\t\tstyle: 'decimal',\n\t\t\tminimumFractionDigits: minFractionDigits,\n\t\t\tmaximumFractionDigits: maxFractionDigits,\n\t\t}\n\t\tsymbol = 'Îž'\n\t\tsymbolPrepended = false\n\t\tcryptocurrency = true\n\t}\n\n\tif (currency === 'VETH') {\n\t\toptions = {\n\t\t\tstyle: 'decimal',\n\t\t\tminimumFractionDigits: minFractionDigits,\n\t\t\tmaximumFractionDigits: maxFractionDigits,\n\t\t}\n\t\tsymbol = 'VETH'\n\t\tsymbolPrepended = false\n\t\tcryptocurrency = true\n\t}\n\n\tif (currency === 'VADER') {\n\t\toptions = {\n\t\t\tstyle: 'decimal',\n\t\t\tminimumFractionDigits: minFractionDigits,\n\t\t\tmaximumFractionDigits: maxFractionDigits,\n\t\t}\n\t\tsymbol = 'VADER'\n\t\tsymbolPrepended = false\n\t\tcryptocurrency = true\n\t}\n\n\tif (currency === 'USDV') {\n\t\toptions = {\n\t\t\tstyle: 'decimal',\n\t\t\tminimumFractionDigits: minFractionDigits,\n\t\t\tmaximumFractionDigits: maxFractionDigits,\n\t\t}\n\t\tsymbol = 'USDV'\n\t\tsymbolPrepended = false\n\t\tcryptocurrency = true\n\t}\n\n\tconst currencyValue = new Intl.NumberFormat(locales, options)\n\n\treturn (\n\t\tcryptocurrency ? `${symbolPrepended ? symbol + '\\u00A0' : ''}${currencyValue.format(amount)}${symbolPrepended ? '' : '\\u00A0' + symbol}`\n\t\t\t: currencyValue.format(amount)\n\t)\n}\n\nconst prettifyNumber = (amount, minFractionDigits = 0, maxFractionDigits = 0, locales = 'en-US', notation = 'standard') => {\n\tconst options = {\n\t\tminimumFractionDigits: minFractionDigits,\n\t\tmaximumFractionDigits: maxFractionDigits,\n\t\tnotation: notation,\n\t}\n\tconst value = isFinite(amount) ? amount : 0\n\treturn (new Intl.NumberFormat(locales, options).format(value))\n}\n\nconst getPercentage = (amount, minFractionDigits = 0, maxFractionDigits = 2, locales = 'en-US') => {\n\tconst options = {\n\t\tstyle: 'percent',\n\t\tminimumFractionDigits: minFractionDigits,\n\t\tmaximumFractionDigits: maxFractionDigits,\n\t}\n\tconst value = isFinite(amount) ? amount : 0\n\treturn (new Intl.NumberFormat(locales, options).format(value))\n}\n\nconst getDateFromSeconds = (seconds) => {\n\treturn new Date(seconds * 1000)\n}\n\nconst getSecondsToGo = (date) => {\n\tconst time = (Date.now() / 1000).toFixed()\n\treturn (Number((date - time)))\n}\n\nconst promiseAllProgress = (promises, tickCallback) => {\n\tconst numPromises = promises.length\n\tlet progress = 0\n\tfunction tick(promise) {\n\t\tpromise.then(() => {\n\t\t\tprogress++\n\t\t\ttypeof tickCallback === 'function' && tickCallback(progress / numPromises)\n\t\t})\n\t\treturn promise\n\t}\n\treturn Promise.all(promises.map(tick))\n}\n\nconst searchFor = (array, string, callBack, regEx = new RegExp(`(${string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})+`, 'gi')) => {\n\tconst object = array.reduce((acc, item, index) => {\n\t\tif (Object.keys(item).find(key => String(item[key]).match(regEx))) acc[index] = item\n\t\treturn acc\n\t}, {})\n\tif(callBack) {\n\t\tcallBack(Object.values(object))\n\t}\n\telse {\n\t\treturn Object.values(object)\n\t}\n}\n\nconst isEthereumAddress = (string) => {\n\tconst regEx = new RegExp('^0x[a-fA-F0-9]{40}$')\n\treturn regEx.test(string)\n}\n\nconst addUnknownTokenToList = (tokenList, newToken) => {\n\tif (!newToken) {\n\t\treturn tokenList\n\t}\n\tconst newList = tokenList\n\tconst index = newList.findIndex(token => token.chainId == newToken.chainId && token.address.toLowerCase() == newToken.address.toLowerCase())\n\tif (index >= 0) {\n\t\tnewList[index] = {\n\t\t\t'chainId': newToken.chainId || newList[index].chainId,\n\t\t\t'address': newToken.address || newList[index].address,\n\t\t\t'name': newToken.name || newList[index].name,\n\t\t\t'symbol': newToken.symbol || newList[index].symbol,\n\t\t\t'decimals': newToken.decimals || newList[index].decimals,\n\t\t\t'logoURI': newToken.logoURI || newList[index].logoURI,\n\t\t}\n\t}\n\telse {\n\t\tnewList.push(newToken)\n\t}\n\treturn newList\n}\n\nconst getCombinedTokenListFromSources = (sources) => {\n\treturn Promise.all(\n\t\tsources.filter((source) => source.enabled === true)\n\t\t\t.map((source) => {\n\t\t\t\tconst p = getTokenList(source.url)\n\t\t\t\t\t.then(d => d.tokens.filter(token => token.chainId == defaults.network.chainId))\n\t\t\t\treturn p\n\t\t\t})).then(data => {\n\t\treturn data.flat()\n\t})\n}\n\nconst getTokenByAddress = async (address) => {\n\tconst list = await getCombinedTokenListFromSources(defaults.tokenList.sources)\n\tconst tokenObj = await list.find(token => token.address === String(address))\n\treturn tokenObj\n}\n\nconst getStartOfTheDayTimeStamp = () => {\n\tconst today = new Date()\n\tconst dd = String(today.getUTCDate()).padStart(2, '0')\n\tconst mm = String(today.getUTCMonth() + 1).padStart(2, '0')\n\tconst yyyy = today.getUTCFullYear()\n\tconst currentDate = `${yyyy}-${mm}-${dd}`\n\treturn Math.floor(new Date(currentDate).getTime() / 1000)\n}\n\nconst getMerkleLeaf = (account, amount) => {\n\tif (account && amount) {\n\t\tconst digest = ethers.utils.solidityKeccak256(\n\t\t\t[ 'address', 'uint256', 'uint256', 'uint256' ],\n\t\t\t[ account, amount, defaults.redeemables[0].salt, defaults.network.chainId ],\n\t\t)\n\t\treturn digest\n\t}\n}\n\nconst getMerkleProofForAccount = (account, snapshot) => {\n\tconst keccak256 = require('keccak256')\n\tconst leaves = []\n\tfor (const [acc, amt] of Object.entries(snapshot)) {\n\t\tif (amt != '0') {\n\t\t\tconst digest = getMerkleLeaf(acc, amt)\n\t\t\tleaves.push(digest)\n\t\t}\n\t}\n\tconst tree = new MerkleTree(leaves, keccak256, {\n\t\thashLeaves: false,\n\t\tsortPairs: true,\n\t})\n\tconst leaf = getMerkleLeaf(account, snapshot[account])\n\tconst proof = tree.getHexProof(leaf)\n\treturn proof\n}\n\nconst calculateDifference = (value1, value2) => value1 > value2 ?\n\t(value1 - value2) / value2 : (value1 - value2) / value1\n\nconst calculateDifference2 = (value1, value2) => {\n\tif (value1._isBigNumber) \n\tvalue1.gt(value2) ?\n\tvalue1.sub(value2).div(value2) : value1.sub(value2).div(value1)\n}\n\nexport {\n\tprettifyAddress, prettifyCurrency, prettifyNumber, getPercentage, getSecondsToGo,\n\tpromiseAllProgress, searchFor, isEthereumAddress, addUnknownTokenToList, getCombinedTokenListFromSources,\n\tgetTokenByAddress, getStartOfTheDayTimeStamp, getMerkleProofForAccount, getMerkleLeaf,\n\tcalculateDifference, getDateFromSeconds, calculateDifference2,\n}\n"]},"metadata":{},"sourceType":"module"}