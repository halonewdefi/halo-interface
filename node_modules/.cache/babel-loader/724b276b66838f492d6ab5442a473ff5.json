{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getVirtualPrice } from '../common/ethereum';\nimport { useERC20Balance } from './useERC20Balance';\nimport defaults from '../common/defaults';\nexport const useUSDVprice = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const balance = useERC20Balance(defaults.address.usdv, defaults.address.usdv3crvf);\n    const usdv3crvfPrice = useQuery(`virtualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n    const crv3poolPrice = useQuery(`virtualPrice_${defaults.address.crv3pool}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n\n    if (balance !== null && balance !== void 0 && balance.data && usdv3crvfPrice !== null && usdv3crvfPrice !== void 0 && usdv3crvfPrice.data && crv3poolPrice !== null && crv3poolPrice !== void 0 && crv3poolPrice.data) {\n      var _balance$data;\n\n      console.log(balance === null || balance === void 0 ? void 0 : (_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : _balance$data.div(usdv3crvfPrice === null || usdv3crvfPrice === void 0 ? void 0 : usdv3crvfPrice.data).mul(usdv3crvfPrice === null || usdv3crvfPrice === void 0 ? void 0 : usdv3crvfPrice.data));\n    }\n  }\n};\n\n_s(useUSDVprice, \"70nsG2O5+uK7XynhHhDT8MopDgw=\", false, function () {\n  return [useERC20Balance, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useUSDVprice.js"],"names":["useQuery","useApolloQuery","gql","getVirtualPrice","useERC20Balance","defaults","useUSDVprice","rpc","pollInterval","api","graphql","staleTime","balance","address","usdv","usdv3crvf","usdv3crvfPrice","crv3poolPrice","crv3pool","data","console","log","div","mul"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,eAAT,QAAgC,oBAAhC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EH,QAAQ,CAACI,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BN,QAAQ,CAACI,GAAT,CAAaE,SAAc;;AAEjI,MAAI,CAACJ,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMK,OAAO,GAAGR,eAAe,CAACC,QAAQ,CAACQ,OAAT,CAAiBC,IAAlB,EAAwBT,QAAQ,CAACQ,OAAT,CAAiBE,SAAzC,CAA/B;AAEA,UAAMC,cAAc,GAAGhB,QAAQ,CAAE,gBAAeK,QAAQ,CAACQ,OAAT,CAAiBE,SAAU,EAA5C,EAC9B,YAAY;AACX,aAAO,MAAMZ,eAAe,EAA5B;AACA,KAH6B,EAG3B;AACFQ,MAAAA,SAAS,EAAEN,QAAQ,CAACI,GAAT,CAAaE;AADtB,KAH2B,CAA/B;AAQA,UAAMM,aAAa,GAAGjB,QAAQ,CAAE,gBAAeK,QAAQ,CAACQ,OAAT,CAAiBK,QAAS,EAA3C,EAC7B,YAAY;AACX,aAAO,MAAMf,eAAe,EAA5B;AACA,KAH4B,EAG1B;AACFQ,MAAAA,SAAS,EAAEN,QAAQ,CAACI,GAAT,CAAaE;AADtB,KAH0B,CAA9B;;AAQA,QAAIC,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEO,IAAT,IACHH,cADG,aACHA,cADG,eACHA,cAAc,CAAEG,IADb,IAEHF,aAFG,aAEHA,aAFG,eAEHA,aAAa,CAAEE,IAFhB,EAEsB;AAAA;;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,aAAYA,OAAZ,wCAAYA,OAAO,CAAEO,IAArB,kDAAY,cAAeG,GAAf,CAAmBN,cAAnB,aAAmBA,cAAnB,uBAAmBA,cAAc,CAAEG,IAAnC,EAAyCI,GAAzC,CAA6CP,cAA7C,aAA6CA,cAA7C,uBAA6CA,cAAc,CAAEG,IAA7D,CAAZ;AACA;AACD;AAED,CAhCM;;GAAMb,Y;UAOKF,e,EAEOJ,Q,EAQDA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getVirtualPrice } from '../common/ethereum'\nimport { useERC20Balance } from './useERC20Balance'\nimport defaults from '../common/defaults'\n\nexport const useUSDVprice = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst balance = useERC20Balance(defaults.address.usdv, defaults.address.usdv3crvf)\n\n\t\tconst usdv3crvfPrice = useQuery(`virtualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tconst crv3poolPrice = useQuery(`virtualPrice_${defaults.address.crv3pool}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (balance?.data &&\n\t\t\tusdv3crvfPrice?.data &&\n\t\t\tcrv3poolPrice?.data) {\n\t\t\tconsole.log(balance?.data?.div(usdv3crvfPrice?.data).mul(usdv3crvfPrice?.data))\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}