{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { bondTerms } from '../common/ethereum';\nimport defaults from '../common/defaults';\nexport const useBondTerms = function (bondAddress) {\n  _s();\n\n  let rpc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.staleTime;\n\n  if (!rpc) {\n    const query = gql`\n\t\tquery {\n\t\t\tterm (\n\t\t\t\tid: \"${String(bondAddress).toLowerCase()}\"\n\t\t\t) {\n\t\t\t\tcontrolVariable\n\t\t\t\tvestingTerm\n\t\t\t\tminPrice\n\t\t\t\tmaxPayout\n\t\t\t\tmaxDebt\n\t\t\t}\n\t\t}\n\t`;\n    const terms = useApolloQuery(query, {\n      pollInterval: pollInterval\n    });\n    return terms;\n  } else {\n    const terms = useQuery(`${bondAddress}_bondTerms`, async () => {\n      if (bondAddress) {\n        return await bondTerms(bondAddress);\n      }\n    }, {\n      staleTime: staleTime\n    });\n    return terms;\n  }\n};\n\n_s(useBondTerms, \"Y8AI2FVS9F9EMrskXershz5XCUc=\", false, function () {\n  return [useApolloQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useBondTerms.js"],"names":["useQuery","useApolloQuery","gql","bondTerms","defaults","useBondTerms","bondAddress","rpc","pollInterval","api","graphql","staleTime","query","String","toLowerCase","terms"],"mappings":";;AAAA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,SAAT,QAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,UAACC,WAAD,EAAoH;AAAA;;AAAA,MAAtGC,GAAsG,uEAAhG,KAAgG;AAAA,MAAzFC,YAAyF,uEAA1EJ,QAAQ,CAACK,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BP,QAAQ,CAACK,GAAT,CAAaE,SAAc;;AAE/I,MAAI,CAACJ,GAAL,EAAU;AACT,UAAMK,KAAK,GAAGV,GAAI;AACpB;AACA;AACA,WAAWW,MAAM,CAACP,WAAD,CAAN,CAAoBQ,WAApB,EAAkC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAZE;AAcA,UAAMC,KAAK,GAAGd,cAAc,CAC3BW,KAD2B,EAE3B;AACEJ,MAAAA,YAAY,EAAEA;AADhB,KAF2B,CAA5B;AAOA,WAAOO,KAAP;AACA,GAvBD,MAwBK;AAEJ,UAAMA,KAAK,GAAGf,QAAQ,CAAE,GAAEM,WAAY,YAAhB,EAA6B,YAAY;AAC9D,UAAIA,WAAJ,EAAiB;AAChB,eAAO,MAAMH,SAAS,CACrBG,WADqB,CAAtB;AAGA;AACD,KANqB,EAMnB;AACFK,MAAAA,SAAS,EAAEA;AADT,KANmB,CAAtB;AAWA,WAAOI,KAAP;AACA;AAED,CA1CM;;GAAMV,Y;UAiBGJ,c,EAWAD,Q","sourcesContent":["import { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { bondTerms } from '../common/ethereum'\nimport defaults from '../common/defaults'\n\nexport const useBondTerms = (bondAddress, rpc = false, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\tconst query = gql`\n\t\tquery {\n\t\t\tterm (\n\t\t\t\tid: \"${String(bondAddress).toLowerCase()}\"\n\t\t\t) {\n\t\t\t\tcontrolVariable\n\t\t\t\tvestingTerm\n\t\t\t\tminPrice\n\t\t\t\tmaxPayout\n\t\t\t\tmaxDebt\n\t\t\t}\n\t\t}\n\t`\n\n\t\tconst terms = useApolloQuery(\n\t\t\tquery,\n\t\t\t{\n   \t\tpollInterval: pollInterval,\n\t\t\t},\n\t\t)\n\n\t\treturn terms\n\t}\n\telse {\n\n\t\tconst terms = useQuery(`${bondAddress}_bondTerms`, async () => {\n\t\t\tif (bondAddress) {\n\t\t\t\treturn await bondTerms(\n\t\t\t\t\tbondAddress,\n\t\t\t\t)\n\t\t\t}\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t},\n\t\t)\n\n\t\treturn terms\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}