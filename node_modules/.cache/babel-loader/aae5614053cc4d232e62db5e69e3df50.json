{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { bondInfo } from '../common/ethereum';\nexport const useBondInfo = function (bondContractAddress, depositorAddress) {\n  _s();\n\n  let rpc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let pollInterval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaults.api.staleTime;\n\n  if (!rpc) {\n    const query = gql`\n\t\tquery {\n\t\t\tbondInfos (\n\t\t\t\twhere: {\n\t\t\t\t\tid: \"${String(bondContractAddress).toLowerCase()}\"\n\t\t\t\t\tdepositor: \"${String(depositorAddress).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\t\tpayout\n\t\t\t\t\tvesting\n\t\t\t\t\tlastBlock\n\t\t\t\t}\n\t\t}\n\t`;\n    const bondInfoQ = useApolloQuery(query, {\n      pollInterval: pollInterval\n    });\n    return bondInfoQ;\n  } else {\n    const bondInfoQ = useQuery(`${bondContractAddress}_${depositorAddress}_bondInfo`, async () => {\n      if (bondContractAddress && depositorAddress) {\n        return await bondInfo(bondContractAddress, depositorAddress);\n      }\n    }, {\n      staleTime: staleTime\n    });\n    return bondInfoQ;\n  }\n};\n\n_s(useBondInfo, \"U0UhSSYmFrWSbTEh7VvJfCu4YoY=\", false, function () {\n  return [useApolloQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useBondInfo.js"],"names":["useQuery","useApolloQuery","gql","defaults","bondInfo","useBondInfo","bondContractAddress","depositorAddress","rpc","pollInterval","api","graphql","staleTime","query","String","toLowerCase","bondInfoQ"],"mappings":";;AAAA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,OAAOG,QAAP,MAAqB,oBAArB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAO,MAAMC,WAAW,GAAG,UAACC,mBAAD,EAAsBC,gBAAtB,EAA8I;AAAA;;AAAA,MAAtGC,GAAsG,uEAAhG,KAAgG;AAAA,MAAzFC,YAAyF,uEAA1EN,QAAQ,CAACO,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BT,QAAQ,CAACO,GAAT,CAAaE,SAAc;;AAExK,MAAI,CAACJ,GAAL,EAAU;AACT,UAAMK,KAAK,GAAGX,GAAI;AACpB;AACA;AACA;AACA,YAAYY,MAAM,CAACR,mBAAD,CAAN,CAA4BS,WAA5B,EAA0C;AACtD,mBAAmBD,MAAM,CAACP,gBAAD,CAAN,CAAyBQ,WAAzB,EAAuC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAbE;AAcA,UAAMC,SAAS,GAAGf,cAAc,CAC/BY,KAD+B,EAE/B;AACEJ,MAAAA,YAAY,EAAEA;AADhB,KAF+B,CAAhC;AAOA,WAAOO,SAAP;AACA,GAvBD,MAwBK;AACJ,UAAMA,SAAS,GAAGhB,QAAQ,CAAE,GAAEM,mBAAoB,IAAGC,gBAAiB,WAA5C,EAAwD,YAAY;AAC7F,UAAID,mBAAmB,IAAIC,gBAA3B,EAA6C;AAC5C,eAAO,MAAMH,QAAQ,CACpBE,mBADoB,EAEpBC,gBAFoB,CAArB;AAIA;AACD,KAPyB,EAOvB;AACFK,MAAAA,SAAS,EAAEA;AADT,KAPuB,CAA1B;AAWA,WAAOI,SAAP;AACA;AAED,CAzCM;;GAAMX,W;UAiBOJ,c,EAUAD,Q","sourcesContent":["import { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { bondInfo } from '../common/ethereum'\n\nexport const useBondInfo = (bondContractAddress, depositorAddress, rpc = false, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\tconst query = gql`\n\t\tquery {\n\t\t\tbondInfos (\n\t\t\t\twhere: {\n\t\t\t\t\tid: \"${String(bondContractAddress).toLowerCase()}\"\n\t\t\t\t\tdepositor: \"${String(depositorAddress).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\t\tpayout\n\t\t\t\t\tvesting\n\t\t\t\t\tlastBlock\n\t\t\t\t}\n\t\t}\n\t`\n\t\tconst bondInfoQ = useApolloQuery(\n\t\t\tquery,\n\t\t\t{\n   \t\tpollInterval: pollInterval,\n\t\t\t},\n\t\t)\n\n\t\treturn bondInfoQ\n\t}\n\telse {\n\t\tconst bondInfoQ = useQuery(`${bondContractAddress}_${depositorAddress}_bondInfo`, async () => {\n\t\t\tif (bondContractAddress && depositorAddress) {\n\t\t\t\treturn await bondInfo(\n\t\t\t\t\tbondContractAddress,\n\t\t\t\t\tdepositorAddress,\n\t\t\t\t)\n\t\t\t}\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t},\n\t\t)\n\t\treturn bondInfoQ\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}