{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleBurns } from '../common/ethereum';\nexport const useBurnLimitRemains = function () {\n  _s();\n\n  var _limits$data;\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const {\n    data: minter\n  } = useQuery('minter', async () => {\n    return await getMinter();\n  }, {\n    staleTime: staleTime\n  });\n  const limits = useQuery('dailyLimits', () => {\n    if (minter) {\n      return getMinterDailyLimits(minter);\n    }\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n  const burned = useQuery('cycleBurns', async () => {\n    if (minter) {\n      return await getCycleBurns(minter);\n    }\n  }, {\n    staleTime: staleTime,\n    enabled: !!minter\n  });\n\n  if (limits !== null && limits !== void 0 && (_limits$data = limits.data) !== null && _limits$data !== void 0 && _limits$data[2] && burned !== null && burned !== void 0 && burned.data) {\n    var _limits$data2;\n\n    return [limits === null || limits === void 0 ? void 0 : (_limits$data2 = limits.data) === null || _limits$data2 === void 0 ? void 0 : _limits$data2[2].sub(burned === null || burned === void 0 ? void 0 : burned.data), burned.refetch];\n  }\n\n  return [undefined, burned.refetch];\n};\n\n_s(useBurnLimitRemains, \"gDfSyPn6fo6jh75Wmwylu5RqkKY=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useBurnLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleBurns","useBurnLimitRemains","staleTime","api","data","minter","limits","enabled","burned","sub","refetch","undefined"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAM;AAAEE,IAAAA,IAAI,EAAEC;AAAR,MAAmBT,QAAQ,CAAC,QAAD,EAAW,YAAY;AACvD,WAAO,MAAME,SAAS,EAAtB;AACA,GAFgC,EAE9B;AACFI,IAAAA,SAAS,EAAEA;AADT,GAF8B,CAAjC;AAOA,QAAMI,MAAM,GAAGV,QAAQ,CAAC,aAAD,EAAgB,MAAM;AAC5C,QAAIS,MAAJ,EAAY;AACX,aAAON,oBAAoB,CAACM,MAAD,CAA3B;AACA;AACD,GAJsB,EAIpB;AACFH,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAE,CAAC,CAACF;AAFT,GAJoB,CAAvB;AAUA,QAAMG,MAAM,GAAGZ,QAAQ,CAAC,YAAD,EAAe,YAAY;AACjD,QAAIS,MAAJ,EAAY;AACX,aAAO,MAAML,aAAa,CAACK,MAAD,CAA1B;AACA;AACD,GAJsB,EAIpB;AACFH,IAAAA,SAAS,EAAEA,SADT;AAEFK,IAAAA,OAAO,EAAE,CAAC,CAACF;AAFT,GAJoB,CAAvB;;AAUA,MAAIC,MAAM,SAAN,IAAAA,MAAM,WAAN,oBAAAA,MAAM,CAAEF,IAAR,sDAAe,CAAf,KAAqBI,MAArB,aAAqBA,MAArB,eAAqBA,MAAM,CAAEJ,IAAjC,EAAuC;AAAA;;AACtC,WAAO,CAACE,MAAD,aAACA,MAAD,wCAACA,MAAM,CAAEF,IAAT,kDAAC,cAAe,CAAf,EAAkBK,GAAlB,CAAsBD,MAAtB,aAAsBA,MAAtB,uBAAsBA,MAAM,CAAEJ,IAA9B,CAAD,EAAsCI,MAAM,CAACE,OAA7C,CAAP;AACA;;AAED,SAAO,CAACC,SAAD,EAAYH,MAAM,CAACE,OAAnB,CAAP;AACA,CAlCM;;GAAMT,mB;UAEaL,Q,EAOVA,Q,EAUAA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleBurns } from '../common/ethereum'\n\nexport const useBurnLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst { data: minter } = useQuery('minter', async () => {\n\t\treturn await getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\n\tconst limits = useQuery('dailyLimits', () => {\n\t\tif (minter) {\n\t\t\treturn getMinterDailyLimits(minter)\n\t\t}\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !!minter,\n\t},\n\t)\n\n\tconst burned = useQuery('cycleBurns', async () => {\n\t\tif (minter) {\n\t\t\treturn await getCycleBurns(minter)\n\t\t}\n\t}, {\n\t\tstaleTime: staleTime,\n\t\tenabled: !!minter,\n\t},\n\t)\n\n\tif (limits?.data?.[2] && burned?.data) {\n\t\treturn [limits?.data?.[2].sub(burned?.data), burned.refetch]\n\t}\n\n\treturn [undefined, burned.refetch]\n}"]},"metadata":{},"sourceType":"module"}