{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers';\nimport { useQuery } from 'react-query';\nimport defaults from '../common/defaults';\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum';\nexport const useMintLimitRemains = function () {\n  _s();\n\n  let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults.api.staleTime;\n  const {\n    data: minter\n  } = useQuery('minter', async () => {\n    return await getMinter();\n  }, {\n    staleTime: staleTime\n  });\n\n  if (minter) {\n    var _limits$data;\n\n    const limits = useQuery('dailyLimits', async () => {\n      console.log(minter);\n      return await getMinterDailyLimits(minter);\n    }, {\n      staleTime: staleTime,\n      enabled: !!minter\n    });\n    const {\n      data: cycleMints\n    } = useQuery('cycleMints', async () => {\n      console.log(minter);\n      return await getCycleMints(minter);\n    }, {\n      staleTime: defaults.api.staleTime\n    }, {\n      staleTime: staleTime,\n      enabled: !!minter\n    });\n\n    if (limits !== null && limits !== void 0 && (_limits$data = limits.data) !== null && _limits$data !== void 0 && _limits$data[1] && cycleMints) {\n      var _limits$data2;\n\n      return limits === null || limits === void 0 ? void 0 : (_limits$data2 = limits.data) === null || _limits$data2 === void 0 ? void 0 : _limits$data2[1].sub(cycleMints);\n    } else {\n      return BigNumber.from('0');\n    }\n  }\n};\n\n_s(useMintLimitRemains, \"Vr+oJuoChSMd6IaBb7rXv4dY/Go=\", false, function () {\n  return [useQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useMintLimitRemains.js"],"names":["BigNumber","useQuery","defaults","getMinter","getMinterDailyLimits","getCycleMints","useMintLimitRemains","staleTime","api","data","minter","limits","console","log","enabled","cycleMints","sub","from"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,EAAoBC,oBAApB,EAA0CC,aAA1C,QAA+D,oBAA/D;AAEA,OAAO,MAAMC,mBAAmB,GAAG,YAAwC;AAAA;;AAAA,MAAvCC,SAAuC,uEAA3BL,QAAQ,CAACM,GAAT,CAAaD,SAAc;AAE1E,QAAM;AAAEE,IAAAA,IAAI,EAAEC;AAAR,MAAmBT,QAAQ,CAAC,QAAD,EAAW,YAAY;AACvD,WAAO,MAAME,SAAS,EAAtB;AACA,GAFgC,EAE9B;AACFI,IAAAA,SAAS,EAAEA;AADT,GAF8B,CAAjC;;AAOA,MAAGG,MAAH,EAAW;AAAA;;AACV,UAAMC,MAAM,GAAGV,QAAQ,CAAC,aAAD,EAAgB,YAAY;AAClDW,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,aAAO,MAAMN,oBAAoB,CAACM,MAAD,CAAjC;AACA,KAHsB,EAGpB;AACFH,MAAAA,SAAS,EAAEA,SADT;AAEFO,MAAAA,OAAO,EAAE,CAAC,CAACJ;AAFT,KAHoB,CAAvB;AASA,UAAM;AAAED,MAAAA,IAAI,EAAEM;AAAR,QAAuBd,QAAQ,CAAC,YAAD,EACpC,YAAY;AACXW,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,aAAO,MAAML,aAAa,CAACK,MAAD,CAA1B;AACA,KAJmC,EAIjC;AACFH,MAAAA,SAAS,EAAEL,QAAQ,CAACM,GAAT,CAAaD;AADtB,KAJiC,EAMjC;AACFA,MAAAA,SAAS,EAAEA,SADT;AAEFO,MAAAA,OAAO,EAAE,CAAC,CAACJ;AAFT,KANiC,CAArC;;AAYA,QAAGC,MAAM,SAAN,IAAAA,MAAM,WAAN,oBAAAA,MAAM,CAAEF,IAAR,sDAAe,CAAf,KAAqBM,UAAxB,EAAoC;AAAA;;AACnC,aAAOJ,MAAP,aAAOA,MAAP,wCAAOA,MAAM,CAAEF,IAAf,kDAAO,cAAe,CAAf,EAAkBO,GAAlB,CAAsBD,UAAtB,CAAP;AACA,KAFD,MAGK;AACJ,aAAOf,SAAS,CAACiB,IAAV,CAAe,GAAf,CAAP;AACA;AACD;AAGD,CAxCM;;GAAMX,mB;UAEaL,Q,EAQTA,Q,EAScA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { BigNumber } from 'ethers'\nimport { useQuery } from 'react-query'\nimport defaults from '../common/defaults'\nimport { getMinter, getMinterDailyLimits, getCycleMints } from '../common/ethereum'\n\nexport const useMintLimitRemains = (staleTime = defaults.api.staleTime) => {\n\n\tconst { data: minter } = useQuery('minter', async () => {\n\t\treturn await getMinter()\n\t}, {\n\t\tstaleTime: staleTime,\n\t},\n\t)\n\n\tif(minter) {\n\t\tconst limits = useQuery('dailyLimits', async () => {\n\t\t\tconsole.log(minter)\n\t\t\treturn await getMinterDailyLimits(minter)\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t\tenabled: !!minter,\n\t\t},\n\t\t)\n\n\t\tconst { data: cycleMints } = useQuery('cycleMints',\n\t\t\tasync () => {\n\t\t\t\tconsole.log(minter)\n\t\t\t\treturn await getCycleMints(minter)\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t}, {\n\t\t\t\tstaleTime: staleTime,\n\t\t\t\tenabled: !!minter,\n\t\t\t},\n\t\t)\n\n\t\tif(limits?.data?.[1] && cycleMints) {\n\t\t\treturn limits?.data?.[1].sub(cycleMints)\n\t\t}\n\t\telse {\n\t\t\treturn BigNumber.from('0')\n\t\t}\n\t}\n\n\n}"]},"metadata":{},"sourceType":"module"}