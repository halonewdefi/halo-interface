{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getERC20BalanceOf } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useWallet } from 'use-wallet';\nexport const useERC20Balance = function (tokenAddress) {\n  _s();\n\n  let rpc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.staleTime;\n  const wallet = useWallet();\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const balance = useQuery(`${tokenAddress}_erc20Balanceof_${wallet === null || wallet === void 0 ? void 0 : wallet.account}`, async () => {\n      if (wallet !== null && wallet !== void 0 && wallet.account && tokenAddress) {\n        return await getERC20BalanceOf(tokenAddress, wallet === null || wallet === void 0 ? void 0 : wallet.account, defaults.network.provider);\n      }\n    }, {\n      staleTime: defaults.api.staleTime,\n      enabled: !!(wallet !== null && wallet !== void 0 && wallet.account) && !!tokenAddress\n    });\n    return balance;\n  }\n};\n\n_s(useERC20Balance, \"FWwVXaa5tdAzfzsPlr51gDKk4po=\", false, function () {\n  return [useWallet, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useERC20Balance.js"],"names":["useQuery","useApolloQuery","gql","getERC20BalanceOf","defaults","useWallet","useERC20Balance","tokenAddress","rpc","pollInterval","api","graphql","staleTime","wallet","balance","account","network","provider","enabled"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,iBAAT,QAAkC,oBAAlC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAO,MAAMC,eAAe,GAAG,UAACC,YAAD,EAAoH;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EL,QAAQ,CAACM,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BR,QAAQ,CAACM,GAAT,CAAaE,SAAc;AAElJ,QAAMC,MAAM,GAAGR,SAAS,EAAxB;;AAEA,MAAI,CAACG,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMM,OAAO,GAAGd,QAAQ,CAAE,GAAEO,YAAa,mBAAkBM,MAAlC,aAAkCA,MAAlC,uBAAkCA,MAAM,CAAEE,OAAQ,EAAnD,EACvB,YAAY;AACX,UAAIF,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEE,OAAR,IAAmBR,YAAvB,EAAqC;AACpC,eAAO,MAAMJ,iBAAiB,CAC7BI,YAD6B,EAE7BM,MAF6B,aAE7BA,MAF6B,uBAE7BA,MAAM,CAAEE,OAFqB,EAG7BX,QAAQ,CAACY,OAAT,CAAiBC,QAHY,CAA9B;AAKA;AACD,KATsB,EASpB;AACFL,MAAAA,SAAS,EAAER,QAAQ,CAACM,GAAT,CAAaE,SADtB;AAEFM,MAAAA,OAAO,EAAG,CAAC,EAACL,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEE,OAAT,CAAD,IAAqB,CAAC,CAACR;AAF/B,KAToB,CAAxB;AAeA,WAAOO,OAAP;AACA;AAED,CA3BM;;GAAMR,e;UAEGD,S,EAOEL,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getERC20BalanceOf } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useWallet } from 'use-wallet'\n\nexport const useERC20Balance = (tokenAddress, rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst wallet = useWallet()\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst balance = useQuery(`${tokenAddress}_erc20Balanceof_${wallet?.account}`,\n\t\t\tasync () => {\n\t\t\t\tif (wallet?.account && tokenAddress) {\n\t\t\t\t\treturn await getERC20BalanceOf(\n\t\t\t\t\t\ttokenAddress,\n\t\t\t\t\t\twallet?.account,\n\t\t\t\t\t\tdefaults.network.provider,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t\tenabled: (!!wallet?.account && !!tokenAddress),\n\t\t\t},\n\t\t)\n\n\t\treturn balance\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}