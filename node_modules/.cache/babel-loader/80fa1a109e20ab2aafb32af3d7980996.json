{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { bondTreasury, getERC20BalanceOf } from '../common/ethereum';\nimport defaults from '../common/defaults';\nexport const useTreasuryBalance = function (bondAddress) {\n  _s();\n\n  let rpc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let pollInterval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.staleTime;\n\n  if (!rpc) {\n    var _treasury$global;\n\n    const treasuryQuery = gql`\n\t\tquery {\n\t\t\tglobal(\n\t\t\t\tid: \"${String(bondAddress).toLowerCase()}_treasury\")\n\t\t\t\t{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t`;\n    const balanceQuery = gql`\n\t\tquery ($address: String!) {\n\t\t\tbalances(\n\t\t\t\twhere: {\n\t\t\t\t\taccount: $address\n\t\t\t\t\ttoken: \"${String(defaults.address.vader).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\tbalance\n\t\t\t}\n\t\t}\n\t`;\n    const {\n      data: treasury\n    } = useApolloQuery(treasuryQuery);\n    const address = treasury === null || treasury === void 0 ? void 0 : (_treasury$global = treasury.global) === null || _treasury$global === void 0 ? void 0 : _treasury$global.value;\n    const balance = useApolloQuery(balanceQuery, {\n      skip: !address,\n      variables: {\n        address\n      },\n      pollInterval: pollInterval\n    });\n    return balance;\n  } else {\n    const {\n      data: treasury\n    } = useQuery(`${bondAddress}_bondTreasury`, async () => {\n      if (bondAddress) {\n        return await bondTreasury(bondAddress);\n      }\n    });\n    const address = treasury;\n    const balance = useQuery(`${address}_treasuryBalance`, async () => {\n      if (address) {\n        return await getERC20BalanceOf(defaults.vader.address, address, defaults.network.provider);\n      }\n    }, {\n      staleTime: staleTime\n    });\n    return balance;\n  }\n};\n\n_s(useTreasuryBalance, \"RBU86rFn8W3Mz/FLOh05Yol0GiE=\", false, function () {\n  return [useApolloQuery, useApolloQuery, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useTreasuryBalance.js"],"names":["useQuery","useApolloQuery","gql","bondTreasury","getERC20BalanceOf","defaults","useTreasuryBalance","bondAddress","rpc","pollInterval","api","graphql","staleTime","treasuryQuery","String","toLowerCase","balanceQuery","address","vader","data","treasury","global","value","balance","skip","variables","network","provider"],"mappings":";;AAAA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,YAAT,EAAuBC,iBAAvB,QAAgD,oBAAhD;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,OAAO,MAAMC,kBAAkB,GAAG,UAACC,WAAD,EAAoH;AAAA;;AAAA,MAAtGC,GAAsG,uEAAhG,KAAgG;AAAA,MAAzFC,YAAyF,uEAA1EJ,QAAQ,CAACK,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BP,QAAQ,CAACK,GAAT,CAAaE,SAAc;;AAErJ,MAAI,CAACJ,GAAL,EAAU;AAAA;;AACT,UAAMK,aAAa,GAAGX,GAAI;AAC5B;AACA;AACA,WAAWY,MAAM,CAACP,WAAD,CAAN,CAAoBQ,WAApB,EAAkC;AAC7C;AACA;AACA;AACA;AACA,EARE;AAUA,UAAMC,YAAY,GAAGd,GAAI;AAC3B;AACA;AACA;AACA;AACA,eAAeY,MAAM,CAACT,QAAQ,CAACY,OAAT,CAAiBC,KAAlB,CAAN,CAA+BH,WAA/B,EAA6C;AAC5D;AACA;AACA;AACA;AACA;AACA,EAXE;AAaA,UAAM;AAAEI,MAAAA,IAAI,EAAEC;AAAR,QAAqBnB,cAAc,CACxCY,aADwC,CAAzC;AAIA,UAAMI,OAAO,GAAGG,QAAH,aAAGA,QAAH,2CAAGA,QAAQ,CAAEC,MAAb,qDAAG,iBAAkBC,KAAlC;AACA,UAAMC,OAAO,GAAGtB,cAAc,CAACe,YAAD,EAC7B;AACCQ,MAAAA,IAAI,EAAE,CAACP,OADR;AAECQ,MAAAA,SAAS,EAAE;AAAER,QAAAA;AAAF,OAFZ;AAGCR,MAAAA,YAAY,EAAEA;AAHf,KAD6B,CAA9B;AAQA,WAAOc,OAAP;AACA,GAtCD,MAuCK;AAEJ,UAAM;AAAEJ,MAAAA,IAAI,EAAEC;AAAR,QAAqBpB,QAAQ,CAAE,GAAEO,WAAY,eAAhB,EAAgC,YAAY;AAC9E,UAAIA,WAAJ,EAAiB;AAChB,eAAO,MAAMJ,YAAY,CACxBI,WADwB,CAAzB;AAGA;AACD,KANkC,CAAnC;AASA,UAAMU,OAAO,GAAGG,QAAhB;AACA,UAAMG,OAAO,GAAGvB,QAAQ,CAAE,GAAEiB,OAAQ,kBAAZ,EAA+B,YAAY;AAClE,UAAIA,OAAJ,EAAa;AACZ,eAAO,MAAMb,iBAAiB,CAC7BC,QAAQ,CAACa,KAAT,CAAeD,OADc,EAE7BA,OAF6B,EAG7BZ,QAAQ,CAACqB,OAAT,CAAiBC,QAHY,CAA9B;AAKA;AACD,KARuB,EAQrB;AACFf,MAAAA,SAAS,EAAEA;AADT,KARqB,CAAxB;AAYA,WAAOW,OAAP;AAEA;AACD,CApEM;;GAAMjB,kB;UA0BgBL,c,EAKXA,c,EAYWD,Q,EAUXA,Q","sourcesContent":["import { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { bondTreasury, getERC20BalanceOf } from '../common/ethereum'\nimport defaults from '../common/defaults'\n\nexport const useTreasuryBalance = (bondAddress, rpc = false, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tif (!rpc) {\n\t\tconst treasuryQuery = gql`\n\t\tquery {\n\t\t\tglobal(\n\t\t\t\tid: \"${String(bondAddress).toLowerCase()}_treasury\")\n\t\t\t\t{\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t`\n\n\t\tconst balanceQuery = gql`\n\t\tquery ($address: String!) {\n\t\t\tbalances(\n\t\t\t\twhere: {\n\t\t\t\t\taccount: $address\n\t\t\t\t\ttoken: \"${String(defaults.address.vader).toLowerCase()}\"\n\t\t\t\t}\n\t\t\t) {\n\t\t\t\tbalance\n\t\t\t}\n\t\t}\n\t`\n\n\t\tconst { data: treasury } = useApolloQuery(\n\t\t\ttreasuryQuery,\n\t )\n\n\t\tconst address = treasury?.global?.value\n\t\tconst balance = useApolloQuery(balanceQuery,\n\t\t\t{\n\t\t\t\tskip: !address,\n\t\t\t\tvariables: { address },\n\t\t\t\tpollInterval: pollInterval,\n\t\t\t},\n\t\t)\n\n\t\treturn balance\n\t}\n\telse {\n\n\t\tconst { data: treasury } = useQuery(`${bondAddress}_bondTreasury`, async () => {\n\t\t\tif (bondAddress) {\n\t\t\t\treturn await bondTreasury(\n\t\t\t\t\tbondAddress,\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\t\t)\n\n\t\tconst address = treasury\n\t\tconst balance = useQuery(`${address}_treasuryBalance`, async () => {\n\t\t\tif (address) {\n\t\t\t\treturn await getERC20BalanceOf(\n\t\t\t\t\tdefaults.vader.address,\n\t\t\t\t\taddress,\n\t\t\t\t\tdefaults.network.provider,\n\t\t\t\t)\n\t\t\t}\n\t\t}, {\n\t\t\tstaleTime: staleTime,\n\t\t},\n\t\t)\n\t\treturn balance\n\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}