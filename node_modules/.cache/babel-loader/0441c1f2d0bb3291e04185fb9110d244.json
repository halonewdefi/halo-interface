{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getRewardRate } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from '../hooks/useERC20Balance';\nexport const useRewardsAPY = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const TWAprice = useUniswapTWAP();\n  const TVL = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getRewardRate();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n    const rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`, async () => {\n      return await getRewardRate();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n    return rewardRate;\n  }\n};\n\n_s(useRewardsAPY, \"JveBU4mAIn6OWoIcxBey7alHQtk=\", false, function () {\n  return [useUniswapTWAP, useERC20Balance, useQuery, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsAPY.js"],"names":["useQuery","useApolloQuery","gql","getRewardRate","defaults","useUniswapTWAP","useERC20Balance","useRewardsAPY","rpc","pollInterval","api","graphql","staleTime","TWAprice","TVL","address","usdv3crvf","stakingRewards","virtualPrice","rewardRate"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,aAAT,QAA8B,oBAA9B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EL,QAAQ,CAACM,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BR,QAAQ,CAACM,GAAT,CAAaE,SAAc;AAElI,QAAMC,QAAQ,GAAGR,cAAc,EAA/B;AACA,QAAMS,GAAG,GAAGR,eAAe,CAACF,QAAQ,CAACW,OAAT,CAAiBC,SAAlB,EAA6BZ,QAAQ,CAACW,OAAT,CAAiBE,cAA9C,CAA3B;;AAGA,MAAI,CAACT,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMU,YAAY,GAAGlB,QAAQ,CAAE,iBAAgBI,QAAQ,CAACW,OAAT,CAAiBC,SAAU,EAA7C,EAC5B,YAAY;AACX,aAAO,MAAMb,aAAa,EAA1B;AACA,KAH2B,EAGzB;AACFS,MAAAA,SAAS,EAAER,QAAQ,CAACM,GAAT,CAAaE;AADtB,KAHyB,CAA7B;AAQA,UAAMO,UAAU,GAAGnB,QAAQ,CAAE,cAAaI,QAAQ,CAACW,OAAT,CAAiBE,cAAe,EAA/C,EAC1B,YAAY;AACX,aAAO,MAAMd,aAAa,EAA1B;AACA,KAHyB,EAGvB;AACFS,MAAAA,SAAS,EAAER,QAAQ,CAACM,GAAT,CAAaE;AADtB,KAHuB,CAA3B;AAQA,WAAOO,UAAP;AACA;AAED,CA9BM;;GAAMZ,a;UAEKF,c,EACLC,e,EAQUN,Q,EAQFA,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getRewardRate } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from '../hooks/useERC20Balance'\n\nexport const useRewardsAPY = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst TVL = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getRewardRate()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tconst rewardRate = useQuery(`rewardRate_${defaults.address.stakingRewards}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getRewardRate()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\treturn rewardRate\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}