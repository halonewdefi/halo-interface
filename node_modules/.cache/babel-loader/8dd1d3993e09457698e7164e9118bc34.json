{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client';\nimport { useQuery } from 'react-query';\nimport { getVirtualPrice } from '../common/ethereum';\nimport defaults from '../common/defaults';\nimport { useUniswapTWAP } from './useUniswapTWAP';\nimport { useERC20Balance } from './useERC20Balance';\nexport const useRewardsTVL = function () {\n  _s();\n\n  let rpc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let pollInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.api.graphql.pollInterval;\n  let staleTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.api.staleTime;\n  const TWAprice = useUniswapTWAP();\n  const balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards);\n\n  if (!rpc) {// GQL 2 DO\n  } else {\n    const virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`, async () => {\n      return await getVirtualPrice();\n    }, {\n      staleTime: defaults.api.staleTime\n    });\n\n    if (balance !== null && balance !== void 0 && balance.data && virtualPrice !== null && virtualPrice !== void 0 && virtualPrice.data) {\n      var _balance$data;\n\n      return balance === null || balance === void 0 ? void 0 : (_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : _balance$data.div(virtualPrice === null || virtualPrice === void 0 ? void 0 : virtualPrice.data);\n    }\n  }\n};\n\n_s(useRewardsTVL, \"VTlZFnmc6OX3DBE4JbJDZyrd8i4=\", false, function () {\n  return [useUniswapTWAP, useERC20Balance, useQuery];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useRewardsTVL.js"],"names":["useQuery","useApolloQuery","gql","getVirtualPrice","defaults","useUniswapTWAP","useERC20Balance","useRewardsTVL","rpc","pollInterval","api","graphql","staleTime","TWAprice","balance","address","usdv3crvf","stakingRewards","virtualPrice","data","div"],"mappings":";;AAAA;AACA,SAASA,QAAQ,IAAIC,cAArB,EAAqCC,GAArC,QAAgD,gBAAhD;AACA,SAASF,QAAT,QAAyB,aAAzB;AACA,SAASG,eAAT,QAAgC,oBAAhC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAsG;AAAA;;AAAA,MAArGC,GAAqG,uEAA/F,IAA+F;AAAA,MAAzFC,YAAyF,uEAA1EL,QAAQ,CAACM,GAAT,CAAaC,OAAb,CAAqBF,YAAqD;AAAA,MAAvCG,SAAuC,uEAA3BR,QAAQ,CAACM,GAAT,CAAaE,SAAc;AAElI,QAAMC,QAAQ,GAAGR,cAAc,EAA/B;AACA,QAAMS,OAAO,GAAGR,eAAe,CAACF,QAAQ,CAACW,OAAT,CAAiBC,SAAlB,EAA6BZ,QAAQ,CAACW,OAAT,CAAiBE,cAA9C,CAA/B;;AAGA,MAAI,CAACT,GAAL,EAAU,CACT;AACA,GAFD,MAGK;AAEJ,UAAMU,YAAY,GAAGlB,QAAQ,CAAE,iBAAgBI,QAAQ,CAACW,OAAT,CAAiBC,SAAU,EAA7C,EAC5B,YAAY;AACX,aAAO,MAAMb,eAAe,EAA5B;AACA,KAH2B,EAGzB;AACFS,MAAAA,SAAS,EAAER,QAAQ,CAACM,GAAT,CAAaE;AADtB,KAHyB,CAA7B;;AAQA,QAAIE,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEK,IAAT,IACHD,YADG,aACHA,YADG,eACHA,YAAY,CAAEC,IADf,EACqB;AAAA;;AAEpB,aAAOL,OAAP,aAAOA,OAAP,wCAAOA,OAAO,CAAEK,IAAhB,kDAAO,cAAeC,GAAf,CAAmBF,YAAnB,aAAmBA,YAAnB,uBAAmBA,YAAY,CAAEC,IAAjC,CAAP;AAEA;AACD;AAED,CA3BM;;GAAMZ,a;UAEKF,c,EACDC,e,EAQMN,Q","sourcesContent":["/* eslint-disable no-unused-vars */\nimport { useQuery as useApolloQuery, gql } from '@apollo/client'\nimport { useQuery } from 'react-query'\nimport { getVirtualPrice } from '../common/ethereum'\nimport defaults from '../common/defaults'\nimport { useUniswapTWAP } from './useUniswapTWAP'\nimport { useERC20Balance } from './useERC20Balance'\n\nexport const useRewardsTVL = (rpc = true, pollInterval = defaults.api.graphql.pollInterval, staleTime = defaults.api.staleTime) => {\n\n\tconst TWAprice = useUniswapTWAP()\n\tconst balance = useERC20Balance(defaults.address.usdv3crvf, defaults.address.stakingRewards)\n\n\n\tif (!rpc) {\n\t\t// GQL 2 DO\n\t}\n\telse {\n\n\t\tconst virtualPrice = useQuery(`viretualPrice_${defaults.address.usdv3crvf}`,\n\t\t\tasync () => {\n\t\t\t\treturn await getVirtualPrice()\n\t\t\t}, {\n\t\t\t\tstaleTime: defaults.api.staleTime,\n\t\t\t},\n\t\t)\n\n\t\tif (balance?.data &&\n\t\t\tvirtualPrice?.data) {\n\n\t\t\treturn balance?.data?.div(virtualPrice?.data)\n\n\t\t}\n\t}\n\n}"]},"metadata":{},"sourceType":"module"}