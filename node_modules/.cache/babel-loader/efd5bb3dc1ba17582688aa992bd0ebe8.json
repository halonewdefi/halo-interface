{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport defaults from '../common/defaults';\nimport { useXvaderPrice } from './useXvaderPrice';\nimport { utils } from 'ethers';\nexport const useXvaderAPR = function (type, basedOnNumberOfRecords) {\n  _s();\n\n  let days = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 365;\n  let pollInterval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaults.api.graphql.pollInterval;\n  const [xvaderPrices] = useXvaderPrice(basedOnNumberOfRecords, pollInterval, 'Day');\n\n  if (xvaderPrices) {\n    var _xvaderPrices$globals;\n\n    const [currentPrice] = xvaderPrices === null || xvaderPrices === void 0 ? void 0 : xvaderPrices.globals;\n    const [oldestPrice] = xvaderPrices === null || xvaderPrices === void 0 ? void 0 : (_xvaderPrices$globals = xvaderPrices.globals) === null || _xvaderPrices$globals === void 0 ? void 0 : _xvaderPrices$globals.slice(-1);\n\n    if (currentPrice && oldestPrice) {\n      const currentPriceBN = utils.parseUnits(currentPrice.value, 'wei');\n      const oldestPriceBN = utils.parseUnits(oldestPrice.value, 'wei');\n      const daysDifferent = Math.floor((currentPrice.timestamp - oldestPrice.timestamp) / 86400);\n      const apr = currentPriceBN.sub(oldestPriceBN).mul(utils.parseUnits('1', 18)).div(oldestPriceBN).div(daysDifferent).mul(days).toString();\n      return [utils.formatUnits(apr)];\n    }\n  }\n\n  return [];\n};\n\n_s(useXvaderAPR, \"J08qWcGoRHogf/ws6fKpuzAKGYE=\", false, function () {\n  return [useXvaderPrice];\n});","map":{"version":3,"sources":["/home/augustin/vader-dapp/src/hooks/useXvaderAPR.js"],"names":["defaults","useXvaderPrice","utils","useXvaderAPR","type","basedOnNumberOfRecords","days","pollInterval","api","graphql","xvaderPrices","currentPrice","globals","oldestPrice","slice","currentPriceBN","parseUnits","value","oldestPriceBN","daysDifferent","Math","floor","timestamp","apr","sub","mul","div","toString","formatUnits"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAO,MAAMC,YAAY,GAAG,UAACC,IAAD,EAAOC,sBAAP,EAAgG;AAAA;;AAAA,MAAjEC,IAAiE,uEAA1D,GAA0D;AAAA,MAArDC,YAAqD,uEAAtCP,QAAQ,CAACQ,GAAT,CAAaC,OAAb,CAAqBF,YAAiB;AAE3H,QAAM,CAACG,YAAD,IAAiBT,cAAc,CAACI,sBAAD,EAAyBE,YAAzB,EAAuC,KAAvC,CAArC;;AAEA,MAAGG,YAAH,EAAiB;AAAA;;AAChB,UAAM,CAACC,YAAD,IAAiBD,YAAjB,aAAiBA,YAAjB,uBAAiBA,YAAY,CAAEE,OAArC;AACA,UAAM,CAACC,WAAD,IAAgBH,YAAhB,aAAgBA,YAAhB,gDAAgBA,YAAY,CAAEE,OAA9B,0DAAgB,sBAAuBE,KAAvB,CAA6B,CAAC,CAA9B,CAAtB;;AACA,QAAGH,YAAY,IAAIE,WAAnB,EAAgC;AAC/B,YAAME,cAAc,GAAGb,KAAK,CAACc,UAAN,CAAiBL,YAAY,CAACM,KAA9B,EAAqC,KAArC,CAAvB;AACA,YAAMC,aAAa,GAAGhB,KAAK,CAACc,UAAN,CAAiBH,WAAW,CAACI,KAA7B,EAAoC,KAApC,CAAtB;AACA,YAAME,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACV,YAAY,CAACW,SAAb,GAAyBT,WAAW,CAACS,SAAtC,IAAmD,KAA9D,CAAtB;AACA,YAAMC,GAAG,GAAOR,cAAc,CAACS,GAAf,CAAmBN,aAAnB,CAAD,CACbO,GADa,CACTvB,KAAK,CAACc,UAAN,CAAiB,GAAjB,EAAsB,EAAtB,CADS,CAAD,CAEZU,GAFY,CAERR,aAFQ,CAAD,CAGXQ,GAHW,CAGPP,aAHO,EAIXM,GAJW,CAIPnB,IAJO,CAAD,CAKVqB,QALU,EAAZ;AAMA,aAAO,CAACzB,KAAK,CAAC0B,WAAN,CAAkBL,GAAlB,CAAD,CAAP;AACA;AACD;;AAED,SAAO,EAAP;AACA,CAtBM;;GAAMpB,Y;UAEWF,c","sourcesContent":["import defaults from '../common/defaults'\nimport { useXvaderPrice } from './useXvaderPrice'\nimport { utils } from 'ethers'\n\nexport const useXvaderAPR = (type, basedOnNumberOfRecords, days = 365, pollInterval = defaults.api.graphql.pollInterval) => {\n\n\tconst [xvaderPrices] = useXvaderPrice(basedOnNumberOfRecords, pollInterval, 'Day')\n\n\tif(xvaderPrices) {\n\t\tconst [currentPrice] = xvaderPrices?.globals\n\t\tconst [oldestPrice] = xvaderPrices?.globals?.slice(-1)\n\t\tif(currentPrice && oldestPrice) {\n\t\t\tconst currentPriceBN = utils.parseUnits(currentPrice.value, 'wei')\n\t\t\tconst oldestPriceBN = utils.parseUnits(oldestPrice.value, 'wei')\n\t\t\tconst daysDifferent = Math.floor((currentPrice.timestamp - oldestPrice.timestamp) / 86400)\n\t\t\tconst apr = ((((currentPriceBN.sub(oldestPriceBN))\n\t\t\t\t.mul(utils.parseUnits('1', 18)))\n\t\t\t\t.div(oldestPriceBN))\n\t\t\t\t.div(daysDifferent)\n\t\t\t\t.mul(days))\n\t\t\t\t.toString()\n\t\t\treturn [utils.formatUnits(apr)]\n\t\t}\n\t}\n\n\treturn []\n}"]},"metadata":{},"sourceType":"module"}